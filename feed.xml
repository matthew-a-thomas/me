<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-06-14T16:47:55-05:00</updated><id>/feed.xml</id><entry><title type="html">Reentrant Async Lock</title><link href="/programming/2022/06/14/reentrant-async-lock.html" rel="alternate" type="text/html" title="Reentrant Async Lock" /><published>2022-06-14T00:00:00-05:00</published><updated>2022-06-14T00:00:00-05:00</updated><id>/programming/2022/06/14/reentrant-async-lock</id><content type="html" xml:base="/programming/2022/06/14/reentrant-async-lock.html"><![CDATA[<p>Max Fedotov
<a href="https://itnext.io/reentrant-recursive-async-lock-is-impossible-in-c-e9593f4aa38a">wrote</a>:</p>
<blockquote>
  <p>If you need a reentrant async lock — you are out of luck and would have to
  get rid of lock reentry in your code-base instead.</p>
</blockquote>

<p>I’m here to tell you that you are <em>not</em> out of luck. You just need to try harder
;)</p>

<p>Here’s how we’ll have our cake and eat it too:</p>

<ol>
  <li>Make a custom <code class="language-plaintext highlighter-rouge">SynchronizationContext</code></li>
  <li>Make that <code class="language-plaintext highlighter-rouge">SynchronizationContext</code> awaitable</li>
  <li>Use some special semantics</li>
</ol>

<h2 id="custom-synchronizationcontext">Custom <code class="language-plaintext highlighter-rouge">SynchronizationContext</code></h2>

<p>First, implement a <code class="language-plaintext highlighter-rouge">SynchronizationContext</code> that executes its bits of work
one-at-a-time. Sort of like a <code class="language-plaintext highlighter-rouge">Dispatcher</code> in WPF.</p>

<p>Here’s one I threw together:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections.Concurrent</span><span class="p">;</span>

<span class="c1">/// &lt;summary&gt;</span>
<span class="c1">/// A &lt;see cref="SynchronizationContext"/&gt; in which units of work are executed one-at-a-time on the thread pool.</span>
<span class="c1">/// &lt;/summary&gt;</span>
<span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">WorkQueue</span> <span class="p">:</span> <span class="n">SynchronizationContext</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Exposes exceptions thrown on this &lt;see cref="SynchronizationContext"/&gt;.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">event</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;?</span> <span class="n">ExceptionThrown</span><span class="p">;</span>

    <span class="k">readonly</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">Entry</span><span class="p">&gt;</span> <span class="n">_entries</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
    <span class="k">readonly</span> <span class="kt">object</span> <span class="n">_gate</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
    <span class="kt">bool</span> <span class="n">_isPumping</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">Action</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">?&gt;</span> <span class="n">PumpDelegate</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">SendOrPostCallback</span> <span class="n">SetManualResetEventSlimDelegate</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">ConcurrentBag</span><span class="p">&lt;</span><span class="n">ManualResetEventSlim</span><span class="p">&gt;</span> <span class="n">UnusedManualResetEvents</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

    <span class="k">static</span> <span class="nf">WorkQueue</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">PumpDelegate</span> <span class="p">=</span> <span class="n">Pump</span><span class="p">;</span>
        <span class="n">SetManualResetEventSlimDelegate</span> <span class="p">=</span> <span class="n">SetManualResetEventSlim</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Returns a new &lt;see cref="WorkQueue"/&gt;.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">SynchronizationContext</span> <span class="nf">CreateCopy</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">WorkQueue</span><span class="p">();</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Post</span><span class="p">(</span><span class="n">SendOrPostCallback</span> <span class="n">d</span><span class="p">,</span> <span class="kt">object</span><span class="p">?</span> <span class="n">state</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">lock</span> <span class="p">(</span><span class="n">_gate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_entries</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="k">new</span> <span class="nf">Entry</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">state</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_isPumping</span><span class="p">)</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="n">_isPumping</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ThreadPool</span><span class="p">.</span><span class="nf">QueueUserWorkItem</span><span class="p">(</span><span class="n">PumpDelegate</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Pump</span><span class="p">(</span><span class="kt">object</span><span class="p">?</span> <span class="n">state</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">me</span> <span class="p">=</span> <span class="p">(</span><span class="n">WorkQueue</span><span class="p">)</span><span class="n">state</span><span class="p">!;</span>
        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Entry</span> <span class="n">entry</span><span class="p">;</span>
            <span class="k">lock</span> <span class="p">(</span><span class="n">me</span><span class="p">.</span><span class="n">_gate</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">me</span><span class="p">.</span><span class="n">_entries</span><span class="p">.</span><span class="nf">TryDequeue</span><span class="p">(</span><span class="k">out</span> <span class="n">entry</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">me</span><span class="p">.</span><span class="n">_isPumping</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">entry</span><span class="p">.</span><span class="nf">Callback</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">State</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">me</span><span class="p">.</span><span class="n">ExceptionThrown</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Send</span><span class="p">(</span><span class="n">SendOrPostCallback</span> <span class="n">d</span><span class="p">,</span> <span class="kt">object</span><span class="p">?</span> <span class="n">state</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nf">Post</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">state</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">UnusedManualResetEvents</span><span class="p">.</span><span class="nf">TryTake</span><span class="p">(</span><span class="k">out</span> <span class="kt">var</span> <span class="n">mre</span><span class="p">))</span>
            <span class="n">mre</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ManualResetEventSlim</span><span class="p">();</span>
        <span class="nf">Post</span><span class="p">(</span><span class="n">SetManualResetEventSlimDelegate</span><span class="p">,</span> <span class="n">mre</span><span class="p">);</span>
        <span class="n">mre</span><span class="p">.</span><span class="nf">Wait</span><span class="p">();</span>
        <span class="n">mre</span><span class="p">.</span><span class="nf">Reset</span><span class="p">();</span>
        <span class="n">UnusedManualResetEvents</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">mre</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">SetManualResetEventSlim</span><span class="p">(</span><span class="kt">object</span><span class="p">?</span> <span class="n">state</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">mre</span> <span class="p">=</span> <span class="p">(</span><span class="n">ManualResetEventSlim</span><span class="p">)</span><span class="n">state</span><span class="p">!;</span>
        <span class="n">mre</span><span class="p">.</span><span class="nf">Set</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">record</span> <span class="k">struct</span> <span class="nc">Entry</span><span class="p">(</span><span class="n">SendOrPostCallback</span> <span class="n">Callback</span><span class="p">,</span> <span class="kt">object</span><span class="p">?</span> <span class="n">State</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="make-it-awaitable">Make it awaitable</h2>

<p>I’ll leave it as an exercise for the reader to figure out how to implement
<code class="language-plaintext highlighter-rouge">AwaitableSynchronizationContext</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SynchronizationContextExtensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">AwaitableSynchronizationContext</span> <span class="nf">RunBelow</span><span class="p">(</span><span class="k">this</span> <span class="n">SynchronizationContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://www.google.com/search?q=c%23+await+anything">Hint</a>.</p>

<p>Okay, here are some big clues… the awaiter returned from
<code class="language-plaintext highlighter-rouge">AwaitableSynchronizationContext.GetAwaiter()</code> needs to:</p>

<ul>
  <li>Return <code class="language-plaintext highlighter-rouge">false</code> from <code class="language-plaintext highlighter-rouge">IsCompleted</code></li>
  <li>Pass the continuation from <code class="language-plaintext highlighter-rouge">OnCompleted</code> to <code class="language-plaintext highlighter-rouge">SynchronizationContext.Post</code></li>
</ul>

<h2 id="use-special-semantics">Use special semantics</h2>

<p>And now the grand finale…</p>

<p>When you want guarded access, just <code class="language-plaintext highlighter-rouge">await yourWorkQueue.RunBelow()</code>. It’ll be
reentrant, asynchronous, and it provides mutual exclusion:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">SeeItIsPossible</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">isExclusive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">void</span> <span class="nf">ExclusivelyUse</span><span class="p">(</span><span class="kt">object</span> <span class="n">thing</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isExclusive</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">();</span>
        <span class="n">isExclusive</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="n">Thread</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">finally</span>
        <span class="p">{</span>
            <span class="n">isExclusive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">var</span> <span class="n">nonThreadSafeResource</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">asyncGuard</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WorkQueue</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">exceptions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;();</span>
    <span class="n">asyncGuard</span><span class="p">.</span><span class="n">ExceptionThrown</span> <span class="p">+=</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">Add</span><span class="p">;</span>
    <span class="k">async</span> <span class="n">Task</span> <span class="nf">RecursivelyUseIt</span><span class="p">(</span><span class="kt">int</span> <span class="n">recursionLevel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">await</span> <span class="n">asyncGuard</span><span class="p">.</span><span class="nf">RunBelow</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">recursionLevel</span> <span class="p">&gt;</span> <span class="m">10</span><span class="p">)</span>
            <span class="nf">ExclusivelyUse</span><span class="p">(</span><span class="n">nonThreadSafeResource</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="k">await</span> <span class="nf">RecursivelyUseIt</span><span class="p">(</span><span class="n">recursionLevel</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">WhenAll</span><span class="p">(</span>
        <span class="nf">RecursivelyUseIt</span><span class="p">(</span><span class="m">0</span><span class="p">),</span>
        <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">asyncGuard</span><span class="p">.</span><span class="nf">RunBelow</span><span class="p">();</span>
                <span class="nf">ExclusivelyUse</span><span class="p">(</span><span class="n">nonThreadSafeResource</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">);</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">Empty</span><span class="p">(</span><span class="n">exceptions</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[A correct implementation]]></summary></entry><entry><title type="html">Loading Loose XAML</title><link href="/programming/2022/06/03/loading-loose-xaml.html" rel="alternate" type="text/html" title="Loading Loose XAML" /><published>2022-06-03T00:00:00-05:00</published><updated>2022-06-03T00:00:00-05:00</updated><id>/programming/2022/06/03/loading-loose-xaml</id><content type="html" xml:base="/programming/2022/06/03/loading-loose-xaml.html"><![CDATA[<p>Suppose you have a custom thingy like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">LooseXaml</span><span class="p">;</span>

<span class="k">sealed</span> <span class="k">class</span> <span class="nc">CustomThingy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Property</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>…and you declare it in some XAML:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;CustomThingy</span> <span class="na">xmlns=</span><span class="s">"clr-namespace:LooseXaml"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;CustomThingy.Property&gt;</span>Hello, world!<span class="nt">&lt;/CustomThingy.Property&gt;</span>
<span class="nt">&lt;/CustomThingy&gt;</span>
</code></pre></div></div>

<p>…and that XAML is in a file named “EmbeddedResource.xaml”, which is an
embedded resource:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

    &lt;PropertyGroup&gt;
        &lt;OutputType&gt;WinExe&lt;/OutputType&gt;
        &lt;TargetFramework&gt;net6.0-windows&lt;/TargetFramework&gt;
        &lt;Nullable&gt;enable&lt;/Nullable&gt;
        &lt;UseWPF&gt;true&lt;/UseWPF&gt;
    &lt;/PropertyGroup&gt;

    &lt;ItemGroup&gt;
      &lt;Page Remove="EmbeddedResource.xaml" /&gt;
      &lt;EmbeddedResource Include="EmbeddedResource.xaml" /&gt;
    &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre></div></div>

<p>Did you know you can parse and instantiate it?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">LooseXaml</span><span class="p">;</span>

<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Windows</span><span class="p">;</span>

<span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">App</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnStartup</span><span class="p">(</span><span class="n">StartupEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="nf">GetType</span><span class="p">();</span>
        <span class="kt">var</span> <span class="n">assembly</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">Assembly</span><span class="p">;</span>
        <span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">assembly</span><span class="p">.</span><span class="nf">GetManifestResourceStream</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="s">"EmbeddedResource.xaml"</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">stream</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Wrong resource name"</span><span class="p">);</span>
        <span class="k">using</span> <span class="nn">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamReader</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">loader</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Loader</span><span class="p">();</span>
        <span class="kt">var</span> <span class="n">customThingy</span> <span class="p">=</span> <span class="n">loader</span><span class="p">.</span><span class="n">Load</span><span class="p">&lt;</span><span class="n">CustomThingy</span><span class="p">&gt;(</span>
            <span class="n">reader</span><span class="p">,</span>
            <span class="n">assembly</span><span class="p">,</span>
            <span class="k">new</span> <span class="p">[]</span> <span class="p">{</span> <span class="n">assembly</span> <span class="p">}</span>
        <span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">customThingy</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Failed to load it. Are you sure that XAML declares a CustomThingy?"</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">customThingy</span><span class="p">.</span><span class="n">Property</span> <span class="p">!=</span> <span class="s">"Hello, world!"</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Loaded it, but its property is wrong for some reason"</span><span class="p">);</span>
        <span class="n">Trace</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"It works!"</span><span class="p">);</span>
        <span class="n">Environment</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-loader">The loader</h2>

<p>Here’s how:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">LooseXaml</span><span class="p">;</span>

<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Xaml</span><span class="p">;</span>

<span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">Loader</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">T</span><span class="p">?</span> <span class="n">Load</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
        <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">,</span>
        <span class="n">Assembly</span> <span class="n">localAssembly</span><span class="p">,</span>
        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Assembly</span><span class="p">&gt;</span> <span class="n">assemblies</span><span class="p">)</span>
        <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">XamlSchemaContext</span><span class="p">(</span><span class="n">assemblies</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">settings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XamlXmlReaderSettings</span>
        <span class="p">{</span>
            <span class="n">LocalAssembly</span> <span class="p">=</span> <span class="n">localAssembly</span><span class="p">,</span>
            <span class="n">ProvideLineInfo</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
            <span class="n">AllowProtectedMembersOnRoot</span> <span class="p">=</span> <span class="k">true</span>
        <span class="p">};</span>
        <span class="k">using</span> <span class="nn">var</span> <span class="n">xamlXmlReader</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">XamlXmlReader</span><span class="p">(</span>
            <span class="n">textReader</span><span class="p">,</span>
            <span class="n">context</span><span class="p">,</span>
            <span class="n">settings</span>
        <span class="p">);</span>
        <span class="kt">var</span> <span class="n">root</span> <span class="p">=</span> <span class="n">XamlServices</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="n">xamlXmlReader</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">root</span> <span class="k">as</span> <span class="n">T</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="things-to-remember">Things to remember</h2>

<h3 id="xaml-only-supports-parameterless-constructors">XAML only supports parameterless constructors</h3>

<p>Well, technically you can use the
<a href="https://docs.microsoft.com/en-us/dotnet/desktop/xaml-services/xfactorymethod-directive"><code class="language-plaintext highlighter-rouge">x:FactoryMethod</code></a>
or
<a href="https://docs.microsoft.com/en-us/dotnet/desktop/xaml-services/xarguments-directive"><code class="language-plaintext highlighter-rouge">x:Arguments</code></a>
directives.</p>

<p>If you do that then remember to include the
<code class="language-plaintext highlighter-rouge">xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"</code> namespace in your XAML.</p>

<h3 id="xamlxmlreadersettingslocalassembly-is-important"><code class="language-plaintext highlighter-rouge">XamlXmlReaderSettings.LocalAssembly</code> is important</h3>

<p>According to
<a href="https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml?view=netframeworkdesktop-4.8#mapping-to-current-assemblies">Microsoft’s documentation</a>
you can omit the <code class="language-plaintext highlighter-rouge">;assembly=YourAssembly</code> part of
<code class="language-plaintext highlighter-rouge">xmlns="clr-namespace:YourNamespace;assembly=YourAssembly"</code>.</p>

<p>When you do then it’ll assume you’re talking about the current assembly. Which
is what <code class="language-plaintext highlighter-rouge">XamlXmlReaderSettings.LocalAssembly</code> points to. So you need to set that
property to the current assembly.</p>

<h2 id="the-point">The point</h2>

<p>You can use XAML for more than just WPF!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[How to parse and load XAML from an embedded resource]]></summary></entry><entry><title type="html">Square Roots and Primes</title><link href="/numbers/2022/05/19/square-roots-primes.html" rel="alternate" type="text/html" title="Square Roots and Primes" /><published>2022-05-19T00:00:00-05:00</published><updated>2022-05-19T00:00:00-05:00</updated><id>/numbers/2022/05/19/square-roots-primes</id><content type="html" xml:base="/numbers/2022/05/19/square-roots-primes.html"><![CDATA[<p>At the end of
<a href="/programming/2020/10/27/making-primes-rust.html">Making Prime Numbers in Rust</a>
I explained how to make a prime number generator. It used trial division. You’ll
notice that I don’t bother trying to divide the candidate number by any prime
larger than its square root.</p>

<p>Why the square root?</p>

<h2 id="graphical-answer">Graphical answer</h2>

<div class="d-flex flex-column">
  <div>100 divided by <span id="divisor-output">10</span></div>
  <input type="range" id="divisor" min="1" value="10" />
  <div>...equals <span id="quotient-output">10</span></div>
  <input type="range" id="quotient" min="1" step="0.1" value="10" disabled="" />
</div>
<script>
  const divisor = document.getElementById('divisor');
  const divisorOutput = document.getElementById('divisor-output');
  const quotient = document.getElementById('quotient');
  const quotientOutput = document.getElementById('quotient-output');
  function updateQuotient() {
    quotient.value = 100 / divisor.value;
    divisorOutput.innerHTML = divisor.value;
    quotientOutput.innerHTML = quotient.value;
  }
  divisor.addEventListener('input', updateQuotient);
</script>

<p><br />
Play with the top slider for a bit.</p>

<p>Do you get it yet?</p>

<p>Here’s a hint: once you’ve figured out that \(100 \div 2 = 50\), you then also
know that \(100 \div 50 = 2\). There’s no need to also divide by 50 because you
already know that answer.</p>

<p>The same goes for all these:</p>

<table>
  <thead>
    <tr>
      <th>100 divided by</th>
      <th>equals</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>50</td>
    </tr>
    <tr>
      <td>3</td>
      <td>33.3</td>
    </tr>
    <tr>
      <td>5</td>
      <td>20</td>
    </tr>
    <tr>
      <td>7</td>
      <td>14.3</td>
    </tr>
    <tr>
      <td>11</td>
      <td>9.1</td>
    </tr>
    <tr>
      <td>13</td>
      <td>7.7</td>
    </tr>
    <tr>
      <td>17</td>
      <td>5.9</td>
    </tr>
    <tr>
      <td>19</td>
      <td>5.3</td>
    </tr>
  </tbody>
</table>

<p>What do you notice about each of those pairs of numbers?</p>

<p>The square root is always at least as large as one of them.</p>

<p>Once you’ve divided by primes up through the square root then you already know
the answers for all the primes larger than the square root. So there’s no need
to also divide by those larger primes.</p>]]></content><author><name></name></author><category term="numbers" /><summary type="html"><![CDATA[Why square roots are used in trial division]]></summary></entry><entry><title type="html">Dynamically Generated Type</title><link href="/programming/2022/02/22/generated-type.html" rel="alternate" type="text/html" title="Dynamically Generated Type" /><published>2022-02-22T00:00:00-06:00</published><updated>2022-02-22T00:00:00-06:00</updated><id>/programming/2022/02/22/generated-type</id><content type="html" xml:base="/programming/2022/02/22/generated-type.html"><![CDATA[<p>There are a variety of ways to interact with C#’s type system. You
can:</p>
<ul>
  <li>Reflect over existing types</li>
  <li>Generate types
    <ul>
      <li>Statically at compile time
        <ul>
          <li>The normal way</li>
          <li>With code generation</li>
        </ul>
      </li>
      <li><strong>Dynamically at runtime</strong></li>
    </ul>
  </li>
</ul>

<p>Here’s some code that does that last category:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Example</span><span class="p">;</span>

<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection.Emit</span><span class="p">;</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IFace</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="nf">Go</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="n">IFace</span> <span class="nf">Create</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">assemblyBuilder</span> <span class="p">=</span> <span class="n">AssemblyBuilder</span><span class="p">.</span><span class="nf">DefineDynamicAssembly</span><span class="p">(</span>
            <span class="k">new</span> <span class="nf">AssemblyName</span><span class="p">(</span><span class="s">"Generated"</span><span class="p">),</span>
            <span class="n">AssemblyBuilderAccess</span><span class="p">.</span><span class="n">Run</span>
        <span class="p">);</span>
        <span class="kt">var</span> <span class="n">moduleBuilder</span> <span class="p">=</span> <span class="n">assemblyBuilder</span><span class="p">.</span><span class="nf">DefineDynamicModule</span><span class="p">(</span><span class="s">"Generated"</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">typeBuilder</span> <span class="p">=</span> <span class="n">moduleBuilder</span><span class="p">.</span><span class="nf">DefineType</span><span class="p">(</span><span class="s">"GeneratedType"</span><span class="p">,</span> <span class="n">TypeAttributes</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">TypeAttributes</span><span class="p">.</span><span class="n">Class</span><span class="p">);</span>
        <span class="n">typeBuilder</span><span class="p">.</span><span class="nf">AddInterfaceImplementation</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IFace</span><span class="p">));</span>
        <span class="kt">var</span> <span class="n">methodBuilder</span> <span class="p">=</span> <span class="n">typeBuilder</span><span class="p">.</span><span class="nf">DefineMethod</span><span class="p">(</span><span class="s">"Go"</span><span class="p">,</span> <span class="n">MethodAttributes</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">MethodAttributes</span><span class="p">.</span><span class="n">Virtual</span><span class="p">,</span> <span class="n">CallingConventions</span><span class="p">.</span><span class="n">HasThis</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">),</span> <span class="n">Type</span><span class="p">.</span><span class="n">EmptyTypes</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">generator</span> <span class="p">=</span> <span class="n">methodBuilder</span><span class="p">.</span><span class="nf">GetILGenerator</span><span class="p">();</span>
        <span class="n">generator</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldstr</span><span class="p">,</span> <span class="s">"Hello, world!"</span><span class="p">);</span>
        <span class="n">generator</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ret</span><span class="p">);</span>

        <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="n">typeBuilder</span><span class="p">.</span><span class="nf">CreateType</span><span class="p">()!;</span>
        <span class="kt">var</span> <span class="n">instance</span> <span class="p">=</span> <span class="n">Activator</span><span class="p">.</span><span class="nf">CreateInstance</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">IFace</span><span class="p">)</span><span class="n">instance</span><span class="p">!;</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">instance</span> <span class="p">=</span> <span class="nf">Create</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">instance</span><span class="p">.</span><span class="nf">Go</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, world!
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[How to dynamically generate a type at runtime in C#]]></summary></entry><entry><title type="html">Rust Traits</title><link href="/programming/2022/02/08/rust-traits-for-csharp-devs.html" rel="alternate" type="text/html" title="Rust Traits" /><published>2022-02-08T00:00:00-06:00</published><updated>2022-02-08T00:00:00-06:00</updated><id>/programming/2022/02/08/rust-traits-for-csharp-devs</id><content type="html" xml:base="/programming/2022/02/08/rust-traits-for-csharp-devs.html"><![CDATA[<p>The <a href="https://www.rust-lang.org/">Rust</a> programming language relies heavily on
<em>traits</em>. But what are they? How do they compare to C#’s interfaces?</p>

<p>In a nutshell, a trait is like a C# interface:</p>
<ul>
  <li>Multiple types can implement it</li>
  <li>You can write code that abstracts over it</li>
  <li>You can do dynamic dispatch with it</li>
  <li>You can write default methods for it</li>
</ul>

<p>…but it is also <em>not</em> like a C# interface:</p>
<ul>
  <li>You can implement a trait for a foreign type</li>
  <li>A trait can have associated types</li>
</ul>

<p>Let’s look at each of these in turn.</p>

<h2 id="like-a-c-interface">Like a C# interface</h2>

<p>The similarities are simple. So I’ll go quick.</p>

<h3 id="multiple-types-can-implement-it">Multiple types can implement it</h3>

<p>In C#, multiple types can implement an interface:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IFoo</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Bar</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">ThingA</span> <span class="p">:</span> <span class="n">IFoo</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Thing A"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">ThingB</span> <span class="p">:</span> <span class="n">IFoo</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Thing B"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The same is true of traits in Rust:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">Foo</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">ThingA</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="n">Foo</span> <span class="k">for</span> <span class="n">ThingA</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Thing A"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">ThingB</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="n">Foo</span> <span class="k">for</span> <span class="n">ThingB</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Thing B"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="you-can-write-code-that-abstracts-over-it">You can write code that abstracts over it</h3>

<p>In C# you can abstract over an interface:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IBinaryOperator</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">Add</span> <span class="p">:</span> <span class="n">IBinaryOperator</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="kt">double</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">Multiply</span> <span class="p">:</span> <span class="n">IBinaryOperator</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="kt">double</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="p">*</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">Example</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="kt">double</span> <span class="n">Apply</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">op</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
  <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IBinaryOperator</span> <span class="p">=&gt;</span>
  <span class="n">op</span><span class="p">.</span><span class="nf">Operate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And the same is true of Rust’s traits:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">BinaryOperator</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">operate</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">f64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">f64</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nb">Add</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="n">BinaryOperator</span> <span class="k">for</span> <span class="nb">Add</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">operate</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">f64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">f64</span> <span class="p">{</span>
    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Multiply</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="n">BinaryOperator</span> <span class="k">for</span> <span class="n">Multiply</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">operate</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">f64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">f64</span> <span class="p">{</span>
    <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">apply</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">BinaryOperator</span><span class="o">&gt;</span><span class="p">(</span><span class="n">op</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="n">a</span><span class="p">:</span> <span class="nb">f64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">f64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">f64</span> <span class="p">{</span>
  <span class="n">op</span><span class="nf">.operate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="you-can-do-dynamic-dispatch-with-it">You can do dynamic dispatch with it</h3>

<p>Dynamic dispatch happens so often in C# that we usually don’t notice it. But
here’s an example of dynamic vs static dispatch in action:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IFoo</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Bar</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">Example</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">DynamicDispatch</span><span class="p">(</span><span class="n">IFoo</span> <span class="n">foo</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">foo</span><span class="p">.</span><span class="nf">bar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">static</span> <span class="k">void</span> <span class="n">StaticDispatch</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">foo</span><span class="p">)</span>
  <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IFoo</span>
  <span class="p">{</span>
    <span class="n">foo</span><span class="p">.</span><span class="nf">bar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here’s the same picture in Rust:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">Foo</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">dynamic_dispatch</span><span class="p">(</span><span class="n">foo</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">Foo</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">foo</span><span class="nf">.bar</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">static_dispatch</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Foo</span><span class="o">&gt;</span><span class="p">(</span><span class="n">foo</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">foo</span><span class="nf">.bar</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="you-can-write-default-methods-for-it">You can write default methods for it</h3>

<p>One of the recent versions of C# added default interface implementations. I’m
writing this off the cuff, but I think it looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IFoo</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Bar</span><span class="p">();</span>

  <span class="k">void</span> <span class="nf">Baz</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nf">Bar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Thing</span> <span class="p">:</span> <span class="n">IFoo</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">// This is the only method we're required to implement</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It’s very similar in Rust:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">Foo</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">);</span>

  <span class="k">fn</span> <span class="nf">baz</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="nf">.bar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Thing</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="n">Foo</span> <span class="k">for</span> <span class="n">Thing</span> <span class="p">{</span>
  <span class="k">fn</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// This is the only method we're required to implement</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="not-like-a-c-interface">Not like a C# interface</h2>

<p>In my opinion this is where Rust’s trait system really begins to shine.</p>

<h3 id="you-can-implement-a-trait-for-a-foreign-type">You can implement a trait for a foreign type</h3>

<p>In C#, when you use a type from some package you found on Nuget or in the
framework (or anywhere for that matter), you’re stuck with whatever interfaces
they decided to implement on that type.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">T</span> <span class="k">this</span><span class="p">[</span><span class="kt">int</span> <span class="n">index</span><span class="p">]</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">Example</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="n">DoImportantStuff</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">indexable</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Very important things happen here. We don't want to repeat ourselves so</span>
    <span class="c1">// we've encapsulated the behavior into this function and we're trying to</span>
    <span class="c1">// make it work for multiple types by abstracting with generics.</span>
  <span class="p">}</span>

  <span class="k">static</span> <span class="k">void</span> <span class="nf">WontWork</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">11</span> <span class="p">};</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="n">array</span><span class="p">);</span> <span class="c1">// Compile error: the array doesn't implement the interface!</span>
    <span class="kt">var</span> <span class="n">span</span> <span class="p">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">AsSpan</span><span class="p">();</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="n">span</span><span class="p">);</span> <span class="c1">// Compile error: Span doesn't implement the interface!</span>
    <span class="kt">var</span> <span class="n">memory</span> <span class="p">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">AsMemory</span><span class="p">();</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="n">memory</span><span class="p">);</span> <span class="c1">// Compile error: Memory doesn't implement the interface!</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The adapter pattern will come to your rescue:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArrayReadableIndexAdapter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">T</span><span class="p">[]</span> <span class="n">_array</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">ArrayReadableIndexAdapter</span><span class="p">(</span><span class="n">T</span><span class="p">[]</span> <span class="n">array</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_array</span> <span class="p">=</span> <span class="n">array</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">T</span> <span class="k">this</span><span class="p">[</span><span class="kt">int</span> <span class="n">index</span><span class="p">]</span> <span class="p">=&gt;</span> <span class="n">_array</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">ref</span> <span class="k">struct</span> <span class="nc">SpanReadableIndexAdapter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">Span</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">_span</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">SpanReadableIndexAdapter</span><span class="p">(</span><span class="n">Span</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">span</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_span</span> <span class="p">=</span> <span class="n">span</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">T</span> <span class="k">this</span><span class="p">[</span><span class="kt">int</span> <span class="n">index</span><span class="p">]</span> <span class="p">=&gt;</span> <span class="n">_span</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">MemoryReadableIndexAdapter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">Memory</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">_memory</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">MemoryReadableIndexAdapter</span><span class="p">(</span><span class="n">Memory</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">memory</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_memory</span> <span class="p">=</span> <span class="n">memory</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">T</span> <span class="k">this</span><span class="p">[</span><span class="kt">int</span> <span class="n">index</span><span class="p">]</span> <span class="p">=&gt;</span> <span class="n">_memory</span><span class="p">.</span><span class="n">Span</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">Example</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="n">DoImportantStuff</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadableIndex</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">indexable</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Same important stuff as before</span>
  <span class="p">}</span>

  <span class="k">static</span> <span class="k">void</span> <span class="nf">WillWork</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">11</span> <span class="p">};</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="k">new</span> <span class="nf">ArrayReadableIndexAdapter</span><span class="p">(</span><span class="n">array</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">span</span> <span class="p">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">AsSpan</span><span class="p">();</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="k">new</span> <span class="nf">SpanReadableIndexAdapter</span><span class="p">(</span><span class="n">span</span><span class="p">));</span>
    <span class="kt">var</span> <span class="n">memory</span> <span class="p">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">AsMemory</span><span class="p">();</span>
    <span class="nf">DoImportantStuff</span><span class="p">(</span><span class="k">new</span> <span class="nf">MemoryReadableIndexAdapter</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But the adapter pattern comes with a cost. Do you see all the boilerplate? We
were trying to follow the <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">Interface Segregation Principle</a>
which says:</p>
<blockquote>
  <p>ISP splits interfaces that are very large into smaller and more specific ones
  so that <strong>clients will only have to know about the methods that are of
  interest to them</strong>.</p>
</blockquote>

<p>Indeed we were following it, because the <code class="language-plaintext highlighter-rouge">IReadableIndex&lt;T&gt;</code> interface exposes
the absolute minimum surface area needed for our “important stuff” method. But
to do so we had to introduce a <em>lot</em> of boilerplate!</p>

<p>Rust makes this much easier!</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nb">Index</span><span class="o">&lt;</span><span class="n">Idx</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">index</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="n">Idx</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">::</span><span class="n">Output</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Implement for arrays</span>
<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="k">const</span> <span class="n">N</span><span class="p">:</span> <span class="nb">usize</span><span class="o">&gt;</span> <span class="nb">Index</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="k">for</span> <span class="p">[</span><span class="n">T</span><span class="p">;</span> <span class="n">N</span><span class="p">]</span> <span class="p">{</span>
  <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
  <span class="k">fn</span> <span class="nf">index</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">::</span><span class="n">Output</span> <span class="p">{</span>
    <span class="o">&amp;</span><span class="k">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Implement for lists</span>
<span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nb">Index</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span> <span class="k">for</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
  <span class="k">fn</span> <span class="nf">index</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="nb">i32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">::</span><span class="n">Output</span> <span class="p">{</span>
    <span class="o">&amp;</span><span class="k">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// etc</span>

<span class="c1">// Now just use the trait!</span>
<span class="k">fn</span> <span class="n">do_important_stuff</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nb">Index</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">indexable</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Important code here</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(The astute reader will notice that Rust already has <a href="https://doc.rust-lang.org/core/ops/trait.Index.html">this trait</a>)</p>

<p>Did you notice how it was possible to implement the trait for <em>foreign</em> types?
It doesn’t matter that we don’t have access to the source code of <code class="language-plaintext highlighter-rouge">[T; N]</code> or
<code class="language-plaintext highlighter-rouge">Vec&lt;T&gt;</code>. We could still make those types implement this trait, and we didn’t
have to introduce any additional types!</p>

<p>It is often much easier in Rust to <em>tailor interfaces to consumers</em>.</p>

<p>To me it seems Microsoft has fallen in love with a form of programming by
convention which they usually apply
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges#implicit-range-support">like this</a>:</p>
<blockquote>
  <p>The language will provide an instance indexer member with a single parameter
  of type <code class="language-plaintext highlighter-rouge">Range</code> for types which meet the following criteria:</p>
  <ul>
    <li>The type is Countable.</li>
    <li>The type has an accessible member named <code class="language-plaintext highlighter-rouge">Slice</code> which has two parameters of
  type <code class="language-plaintext highlighter-rouge">int</code>.</li>
    <li>The type does not have an instance indexer which takes a single <code class="language-plaintext highlighter-rouge">Range</code> as
  the first parameter. The <code class="language-plaintext highlighter-rouge">Range</code> must be the only parameter or the remaining
  parameters must be optional.</li>
  </ul>

  <p>For such types, the language will bind as if there is an indexer member of the
  form <code class="language-plaintext highlighter-rouge">T this[Range range]</code> where <code class="language-plaintext highlighter-rouge">T</code> is the return type of the <code class="language-plaintext highlighter-rouge">Slice</code> method
  including any <code class="language-plaintext highlighter-rouge">ref</code> style annotations. The new member will also have matching
  accessibility with <code class="language-plaintext highlighter-rouge">Slice</code>.</p>
</blockquote>

<p>Ignore the minutiae. The thing I want you to notice is how they didn’t bother to
give us an interface for this new functionality. Instead they said “if you put
this here and name this other thing a certain way then the compiler will
magically do this”. <em>They gave us no help with abstracting over this behavior in
C#.</em> If you wanted to write code that would work for “range-aware” types then
you’d have to create an interface and adapters for all the different types. (And
once you’ve done that then who cares about <em>implicit</em> range support?)</p>

<p>The benefit that Rust’s traits would bring to this situation is there would be
far less boilerplate and <em>no additional types</em> needed to abstract over the very
same feature! Actually, they have already
<a href="https://doc.rust-lang.org/core/ops/trait.Index.html#impl-Index%3CI%3E-1">done</a>
<a href="https://doc.rust-lang.org/core/ops/struct.Range.html#impl-SliceIndex%3C%5BT%5D%3E">this</a>.</p>

<h3 id="a-trait-can-have-associated-types">A trait can have associated types</h3>

<p>In C#, an interface may have:</p>
<ul>
  <li>Methods</li>
  <li>Properties (which are just syntax sugar for methods)</li>
</ul>

<p>But in Rust, a trait may have:</p>
<ul>
  <li>Methods</li>
  <li>Associated types</li>
</ul>

<p>For example, how would you represent this in C#?</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nb">Add</span><span class="o">&lt;</span><span class="n">Rhs</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
  <span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">rhs</span><span class="p">:</span> <span class="n">Rhs</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span><span class="p">::</span><span class="n">Output</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Foo</span> <span class="p">{}</span>

<span class="k">struct</span> <span class="n">Bar</span> <span class="p">{}</span>

<span class="k">struct</span> <span class="n">Baz</span> <span class="p">{}</span>

<span class="k">impl</span> <span class="nb">Add</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Foo</span> <span class="p">{</span>
  <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">Baz</span><span class="p">;</span>
  <span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">rhs</span><span class="p">:</span> <span class="n">Bar</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Baz</span> <span class="p">{</span>
    <span class="c1">// Make a baz from this foo and the given bar</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span> <span class="p">{};</span>
<span class="k">let</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Bar</span> <span class="p">{};</span>
<span class="k">let</span> <span class="n">baz</span><span class="p">:</span> <span class="n">Baz</span> <span class="o">=</span> <span class="n">foo</span> <span class="o">+</span> <span class="n">bar</span><span class="p">;</span>
</code></pre></div></div>

<p>I think in C# the interface would have to look like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IAdd</span><span class="p">&lt;</span><span class="n">TRight</span><span class="p">,</span> <span class="n">TOut</span><span class="p">&gt;</span>
<span class="p">{</span>
  <span class="n">TOut</span> <span class="nf">Add</span><span class="p">(</span><span class="n">TRight</span> <span class="n">right</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But then you have a second generic type parameter that you have to carry
everywhere.</p>

<p>Rust’s associated types are great for hiding generic types in certain
situations. You can even have associated <em>constants</em> (although support for that
isn’t yet complete).</p>

<hr />

<p><em>Caution: the code in this article was written off the cuff and on the fly. It
probably won’t compile.</em></p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Explained for C# developers]]></summary></entry><entry><title type="html">Multi-Wire Branch Circuit</title><link href="/diy/2021/11/19/mwbc.html" rel="alternate" type="text/html" title="Multi-Wire Branch Circuit" /><published>2021-11-19T00:00:00-06:00</published><updated>2021-11-19T00:00:00-06:00</updated><id>/diy/2021/11/19/mwbc</id><content type="html" xml:base="/diy/2021/11/19/mwbc.html"><![CDATA[<p>I’m having an electrical sub panel installed in my garage. I’ve always wanted
more lights and outlets than the current circuits can handle. And plus I’m
beginning to need 240V for power tools.</p>

<p>As I plan ahead I’m having to learn about all the different outlets, wire
gauges, breakers, and circuits related to both 120V and 240V.</p>

<p>One thing I’m learning about is something called a multi-wire branch circuit
(MWBC).</p>

<h2 id="what-is-a-mwbc">What is a MWBC</h2>

<p>A MWBC gives you two circuits that are out of phase and share a neutral.</p>

<p>Here in the United States the electrical service that comes into your house is
essentially a MWBC. Generally half of the 120V appliances will be on one leg and
the other half will be on the other leg. Bigger appliances that require 240V
service, like an electric stove or HVAC system, will be wired across both legs.
Like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Transformer | Electrical panel | Appliances

+120V ------ ------------------ ---+-------------+
                                    \             \
                                     | Fridge      |
                                    /              |
Neutral ---- ------------------ ---+               | Stove
                                    \              |
                                     | Microwave   |
                                    /             /
-120V ------ ------------------ ---+-------------+
</code></pre></div></div>

<p>Notice how the 120V fridge and microwave share a common neutral?</p>

<h2 id="how-does-it-work">How does it work?</h2>

<p>It’s important that the two 120V legs are exactly out of phase. When they are
out of phase then the neutral line only has to carry the <em>difference</em> in current
between the two legs. But if the two legs are in phase then it has to carry the
<em>sum</em> of the currents.</p>

<p>In a MWBC (where the 120V legs are out of phase) you can use the same gauge wire
for the neutral as for the two legs. In other words you can use a single 12/3
copper wire to feed two 20A 120V circuits. The highest load the neutral will see
is when one leg is using a lot of current and the other is using none.
Paradoxically, the neutral will see zero current when both legs are using
exactly the same amount of current.</p>

<p>But if the legs were in phase then the neutral would have to be sized to carry
twice the capacity of the legs. The highest load the neutral would see in that
case is when both legs are using a lot of current. And the neutral would only
ever see zero current when neither leg is using any current.</p>

<p>Here’s why: in a MWBC if the two legs are using the same amount of current then
the same amount of current will be flowing into one leg as <em>out</em> the other,
because they are exactly out of phase. But if they were in phase then the same
amount of current would be flowing into one leg as <em>into</em> the other, and those
two currents have nowhere to go but through the neutral.</p>

<h2 id="how-do-you-make-one">How do you make one?</h2>

<p>Pick an amperage, like 20A. Get a 20A double pole breaker and some 12/3 (which
is rated for 20A) and a NEMA 5-20 (which is rated for 120V 20A) duplex outlet.
The 12/3 will have four conductors in it:</p>
<ul>
  <li>Black - one 120V leg</li>
  <li>White - neutral</li>
  <li>Red - the other 120V leg</li>
  <li>Bare copper - ground</li>
</ul>

<p>Because you’re using a double pole breaker then the black and red lines will be
out of phase.</p>

<p>Break the hot tab on your duplex outlet so that the hot side of the two
receptacles are no longer electrically connected.</p>

<p>Then wire it like this:</p>
<ul>
  <li>Black -&gt; one receptacle</li>
  <li>Neutral -&gt; shared neutral</li>
  <li>Red -&gt; the other receptacle</li>
  <li>Ground -&gt; shared ground</li>
</ul>

<p>Tada! You now have an outlet that can pump 20A out of both receptacles at once!</p>

<h2 id="rules">Rules</h2>

<p>In addition to all the rules for normal wiring, a MWBC additionally has these
requirements:</p>

<p>When you flip a breaker it has to turn off both legs. This is to prevent any
nasty surprises when someone flips the breaker to do work inside the outlet’s
box—you want both legs to be dead, not just one of them. A double pole
breaker solves this.</p>

<p>You also must take care that you don’t lose the neutral. If you want a MWBC to
feed multiple outlets (not just multiple receptacles, but multiple outlets in a
room) then you have to wire them together in a way that keeps the neutral
connected for all the other outlets if you remove an outlet, or if the neutral
breaks or falls off of an outlet. If you lose the neutral on our example MWBC
above then there will still be 240V between the two hot sides of the receptacles
exactly as there was before. Which in theory is fine without the neutral if both
receptacles are pulling the exact same amount of current. But as soon as there
is a current imbalance then there will be a voltage imbalance—one device
might see 200V while the other only sees 40V—a good way to start a fire.
You also get odd behavior such as lights only working while the toaster is on.
Wiring the outlets in with pigtails helps to keep the integrity of the neutral
line independent of the integrity of the outlet.</p>

<h2 id="the-point">The point</h2>

<p>A MWBC has to be wired properly to work. But it can be a useful way to get lots
of power out of a single duplex outlet. Or a useful way to put a NEMA 6-20
outlet in the same box as a duplex NEMA 5-20 outlet with only a single 12/3
wire.</p>]]></content><author><name></name></author><category term="diy" /><summary type="html"><![CDATA[Learn with me]]></summary></entry><entry><title type="html">Inheritance</title><link href="/programming/2021/10/12/inheritance.html" rel="alternate" type="text/html" title="Inheritance" /><published>2021-10-12T00:00:00-05:00</published><updated>2021-10-12T00:00:00-05:00</updated><id>/programming/2021/10/12/inheritance</id><content type="html" xml:base="/programming/2021/10/12/inheritance.html"><![CDATA[<p>Inheritance is <em>subtyping</em> plus <em>subclassing</em>. It is
<strong>a domain-specific taxonomy with behavior and semantics</strong>. And “semantics”
means dependencies, an interface, and a name. Inheritance is a kind of an “is a”
relationship, as in “a baby <em>is</em> a person”.</p>

<p>Here is a UML diagram of inheritance:</p>

<p><img src="/assets/img/inheritance/uml.png" alt="UML diagram of inheritance" class="img-fluid" /></p>

<h2 id="the-good">The good</h2>

<p>When you need a domain-specific taxonomy with behavior and semantics, then there
really is nothing quite as suited to the task as inheritance.</p>

<h2 id="the-bad">The bad</h2>

<p>When you use inheritance you get <em>all</em> of that. Even if you’d rather not have it
all.</p>

<p>And can you think of a single time you have <em>needed</em> to glue both semantics and
behavior onto a taxonomy? Was it <em>impossible</em> to accomplish that task without
inheritance?</p>

<p>The only times that come to mind for me are when inheritance was forced on me
by a design that already used and required it. I used to think inheritance was
the best solution to a lot of problems, but looking back I can tell that things
would have been better if done differently.</p>

<h3 id="behavior-vs-semantics">Behavior vs semantics</h3>

<p>Behavior is what the thing does. Semantics is what it looks like (its public
methods and properties).</p>

<p>What if you only want the semantics of a thing but not its behavior?</p>

<p>Here’s an example of using inheritance to get the semantics of a thing when you
don’t care about its behavior:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A thing that can drive on roads</span>
<span class="k">abstract</span> <span class="k">class</span> <span class="nc">Car</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">abstract</span> <span class="kt">double</span> <span class="n">WheelSize</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// In inches</span>

  <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Drive</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"We're driving </span><span class="p">{</span><span class="n">speed</span><span class="p">}</span><span class="s"> MPH, which means the wheels are turning at </span><span class="p">{</span><span class="n">speed</span> <span class="p">*</span> <span class="m">1056</span> <span class="p">/</span> <span class="n">WheelSize</span> <span class="p">/</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">/</span> <span class="m">2.0</span><span class="p">}</span><span class="s"> RPM!"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Honk</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Honk!"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// A thing that cars can drive on</span>
<span class="k">class</span> <span class="nc">Road</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">_speedLimit</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">Road</span><span class="p">(</span><span class="kt">double</span> <span class="n">speedLimit</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_speedLimit</span> <span class="p">=</span> <span class="n">speedLimit</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Drive</span><span class="p">(</span><span class="n">Car</span> <span class="n">car</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">car</span><span class="p">.</span><span class="nf">Drive</span><span class="p">(</span><span class="n">_speedLimit</span><span class="p">);</span>
    <span class="n">car</span><span class="p">.</span><span class="nf">Honk</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// You can go fast on highways</span>
<span class="k">class</span> <span class="nc">Highway</span> <span class="p">:</span> <span class="n">Road</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="nf">Highway</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="m">70.0</span><span class="p">)</span>
  <span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// You have to go slow on driveways</span>
<span class="k">class</span> <span class="nc">Driveway</span> <span class="p">:</span> <span class="n">Road</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="nf">Driveway</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="m">5.0</span><span class="p">)</span>
  <span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// A taxiway is a road, is it not?</span>
<span class="k">class</span> <span class="nc">Taxiway</span> <span class="p">:</span> <span class="n">Road</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="nf">Taxiway</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="m">30.0</span><span class="p">)</span> <span class="c1">// Speed limit for planes</span>
  <span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// Planes need to operate on taxiways, so I guess it's a car</span>
<span class="k">abstract</span> <span class="k">class</span> <span class="nc">Plane</span> <span class="p">:</span> <span class="n">Car</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Drive</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Planes do not drive like normal cars</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="p">&lt;</span> <span class="m">50.0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"We're taxiing at </span><span class="p">{</span><span class="n">speed</span><span class="p">}</span><span class="s"> MPH!"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"We're flying at </span><span class="p">{</span><span class="n">speed</span><span class="p">}</span><span class="s"> MPH!"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Honk</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">// Planes do not have horns</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice how <code class="language-plaintext highlighter-rouge">Plane</code> is implemented. It uses <em>none</em> of the behavior of the
underlying <code class="language-plaintext highlighter-rouge">Car</code> class. The only reason it inherits from <code class="language-plaintext highlighter-rouge">Car</code> is so that it
can operate on a <code class="language-plaintext highlighter-rouge">Taxiway</code> (which is a kind of road)—it needs the
semantics of a <code class="language-plaintext highlighter-rouge">Car</code>. But it gets all the baggage of a <code class="language-plaintext highlighter-rouge">Car</code> as well.</p>

<h3 id="constructor-parameters-and-other-dependencies">Constructor parameters and other dependencies</h3>

<p>What about constructor parameters?</p>

<p>They’re part of the semantics, too—the constructor is often a
publicly-facing member.</p>

<p>Have you ever added a constructor parameter? Perhaps to refactor and encapsulate
some behavior after you realized it was repeated all over the place?</p>

<p>Inheritance hierarchies tend to get deeper over time. And the deeper it gets,
the harder it is to change constructor parameters.</p>

<p>And sometimes the behavior that uses the constructor parameter is totally
ignored in child classes—what a waste of effort!</p>

<p>Or how about refactoring a base class. Think about the effort that is required
to do that when there are hundreds of derived classes. You have to understand
<em>exactly</em> what your change means in the context of every single one of those
classes. I’ve had to do that multiple times. It’s no fun!</p>

<h3 id="crossing-domain-boundaries">Crossing domain boundaries</h3>

<p>Let’s continue the above example. Planes have to inherit from <code class="language-plaintext highlighter-rouge">Car</code> because they
operate on taxiways (which is a kind of road).</p>

<p>What about float planes?</p>

<p><a href="https://commons.wikimedia.org/wiki/File:DeHavilland_Single_Otter_Harbour_Air.jpg"><img src="/assets/img/inheritance/DeHavilland_Single_Otter_Harbour_Air.jpg" alt="A float plane" class="img-fluid" /></a></p>

<p><em>Image from <a href="https://commons.wikimedia.org/wiki/File:DeHavilland_Single_Otter_Harbour_Air.jpg">Wikimedia Commons</a></em></p>

<p>That’s definitely a plane. And it’s operating on a waterway.</p>

<p>They can sometimes operate on land, too. See?</p>

<p><a href="https://www.vikingair.com/twin-otter-series-400/twin-otter-answers/can-floatplane-land-ground"><img src="/assets/img/inheritance/Viktoria Amphibs_landing_gear.jpg" alt="A float plane with wheels" class="img-fluid" /></a></p>

<p><em>Image from <a href="https://www.vikingair.com/twin-otter-series-400/twin-otter-answers/can-floatplane-land-ground">Viking Air</a></em></p>

<p>Okay, let’s implement waterways and float planes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A thing that can operate on waterways</span>
<span class="k">class</span> <span class="nc">Watercraft</span>
<span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="c1">// It would be strange to call a waterway a "road", wouldn't it?</span>
<span class="k">class</span> <span class="nc">Waterway</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Operate</span><span class="p">(</span><span class="n">Watercraft</span> <span class="n">watercraft</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// A particular kind of watercraft. It's definitely not a car</span>
<span class="k">class</span> <span class="nc">Speedboat</span> <span class="p">:</span> <span class="n">Watercraft</span>
<span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="c1">// A plane that can operate on the waterways</span>
<span class="k">class</span> <span class="nc">FloatPlane</span> <span class="p">:</span> <span class="p">?????</span>
<span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>From what class should <code class="language-plaintext highlighter-rouge">FloatPlane</code> inherit?</p>

<p>If it inherits from <code class="language-plaintext highlighter-rouge">Plane</code> then it cannot operate on waterways. And if it
inherits from <code class="language-plaintext highlighter-rouge">Watercraft</code> then it cannot operate on taxiways. And C# won’t let
you inherit from both.</p>

<p>Have you ever found yourself <a href="https://stackoverflow.com/search?q=c%23+multiple+inheritance">wishing for multiple inheritance in C#</a>?
I bet you were trying to use inheritance to cross domains.</p>

<h2 id="the-fixes">The fixes</h2>

<p>One fix that would enable you to cross between taxonomies would be to create
adapter classes that inherit from one taxonomy while delegating to an instance
of the other. But that’s just composition in ugly disguise.</p>

<p>Which brings me to my favorite fix: <strong>composition</strong>.</p>

<p>When something is “composed” of other things, that means it has those other
things. Composition is a “has a” relationship. As in “a plane <em>has</em> an engine”.</p>

<p>I favor composition over inheritance. Why relegate composition to only those
times when you need to hack up an inheritance hierarchy?</p>

<h3 id="behavior-vs-semantics-1">Behavior vs semantics</h3>

<p>Do you want the semantics of being eligible to operate on a road?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Something that can operate on a road</span>
<span class="k">interface</span> <span class="nc">IRoadWorthy</span>
<span class="p">{</span>
  <span class="k">void</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// A road</span>
<span class="k">sealed</span> <span class="k">class</span> <span class="nc">Road</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="kt">double</span> <span class="n">_speed</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">Road</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_speed</span> <span class="p">=</span> <span class="n">speed</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Operate</span><span class="p">(</span><span class="n">IRoadWorthy</span> <span class="n">thing</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">thing</span><span class="p">.</span><span class="nf">Operate</span><span class="p">(</span><span class="n">_speed</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Creates highways</span>
<span class="k">sealed</span> <span class="k">class</span> <span class="nc">HighwayFactory</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="n">Road</span> <span class="nf">Create</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Road</span><span class="p">(</span><span class="m">70.0</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Creates driveways</span>
<span class="k">sealed</span> <span class="k">class</span> <span class="nc">DrivewayFactory</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="n">Road</span> <span class="nf">Create</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Road</span><span class="p">(</span><span class="m">5.0</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Creates taxiways</span>
<span class="k">sealed</span> <span class="k">class</span> <span class="nc">TaxiwayFactory</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="n">Road</span> <span class="nf">Create</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Road</span><span class="p">(</span><span class="m">30.0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Do you want the behavior of a car?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="k">class</span> <span class="nc">Car</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Drive</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"We're driving at </span><span class="p">{</span><span class="n">speed</span><span class="p">}</span><span class="s"> MPH!"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Honk</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Honk honk!"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Do you want to be able to operate a car on a road in a particular way?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="k">class</span> <span class="nc">DrivingHonkingCarToRoadWorthyAdapter</span> <span class="p">:</span> <span class="n">IRoadWorthy</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">Car</span> <span class="n">_car</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">DrivingHonkingCarToRoadWorthyAdapter</span><span class="p">(</span><span class="n">Car</span> <span class="n">car</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_car</span> <span class="p">=</span> <span class="n">car</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_car</span><span class="p">.</span><span class="nf">Drive</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
    <span class="n">_car</span><span class="p">.</span><span class="nf">Honk</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Do you want a float plane to operate on a road in a particular way?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="k">class</span> <span class="nc">FloatPlane</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">void</span> <span class="nf">Crash</span><span class="p">(</span><span class="kt">string</span> <span class="n">reason</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Fly</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Float</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">RollOnWheels</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">SkimWater</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">sealed</span> <span class="k">class</span> <span class="nc">MustNotFlyFloatPlaneToRoadWorthyAdapter</span> <span class="p">:</span> <span class="n">IRoadWorthy</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">FloatPlane</span> <span class="n">_floatPlane</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">MustNotFlyFloatPlaneToRoadWorthyAdapter</span><span class="p">(</span><span class="n">FloatPlane</span> <span class="n">floatPlane</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_floatPlane</span> <span class="p">=</span> <span class="n">floatPlane</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Operate</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="p">&lt;=</span> <span class="m">50.0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">_floatPlane</span><span class="p">.</span><span class="nf">RollOnWheels</span><span class="p">(</span><span class="n">speed</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">_floatPlane</span><span class="p">.</span><span class="nf">Crash</span><span class="p">(</span><span class="s">"Too fast to stay on the road"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="but-there-are-too-many-classes">“But there are too many classes!”</h3>

<p>Did you notice how many more classes there are now than there were before? There
is basically one class for each behavior and also for each kind of usage of the
behavior.</p>

<p>Actually, you should count them. There aren’t as many more as you might think
(make sure to remember that <code class="language-plaintext highlighter-rouge">Speedboat</code>, <code class="language-plaintext highlighter-rouge">Waterway</code>, and <code class="language-plaintext highlighter-rouge">Watercraft</code> don’t have
equivalents in the above composition example).</p>

<p>But even if there were dozens more classes, would that be a bad thing?</p>

<p>The classes will tend to be smaller. They’ll tend to be easier to understand at
a glance. Often, everything you need to know fits on a single screen.</p>

<p>The classes will tend to do less. And just by doing less they will be less prone
to bugs. And smaller <a href="https://martinfowler.com/bliki/HumbleObject.html">humbler</a>
classes tend to be more <em>unit testable</em>.</p>

<p>The classes will tend to change less. If you use composition then you’ll find
that you are either creating or deleting classes more than you are modifying
them. And the fewer the modifications, the fewer the regressions.</p>

<p>The classes will tend to be less affected by change. They cannot be affected by
changes upstream in the inheritance hierarchy, because there is no inheritance
hierarchy. As you tailor classes to specific aspects (and then compose those
aspects instead of using inheritance) then you’ll find that there are fewer
dependencies between classes. And the fewer the dependencies, the lower the
likelihood of a dependency introducing a breaking change.</p>

<p>And with good design these things will remain true as your codebase grows
to arbitrary complexity and thousands of source code files.</p>

<p>Now, you can definitely go overboard with layer upon layer of interfaces and
abstractions—I’m guilty of that!—but that doesn’t <em>necessarily</em>
happen when you favor composition over inheritance. And neither is that
<em>necessarily</em> prevented by using inheritance.</p>

<p>In fact, I have found more than one misuse of inheritance that encouraged
copy-and-paste instead of encapsulation-and-reuse, and that encouraged
needlessly large and deep inheritance hierarchies (read: needlessly many
classes). And I have personally misused inheritance to create needlessly many
layers of abstraction.</p>

<h2 id="the-point">The point</h2>

<p>There is more that could be said, perhaps about how interfaces should be
tailored to the interface’s consumer, or the value of unit testing, or how to
make behavior unit-testable, or how following the <a href="https://en.wikipedia.org/wiki/SOLID">SOLID</a>
principles (especially Single Responsibility!) naturally leads to composition
and unit-testability, or the best ways to create an escape hatch from
inheritance without disturbing too much.</p>

<p>But the point is: <strong>Why are you favoring inheritance over composition? Are you misusing inheritance?</strong></p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Musings about favoring either inheritance or composition]]></summary></entry><entry><title type="html">Radial Arm Saw</title><link href="/tools/2021/10/12/ras.html" rel="alternate" type="text/html" title="Radial Arm Saw" /><published>2021-10-12T00:00:00-05:00</published><updated>2021-10-12T00:00:00-05:00</updated><id>/tools/2021/10/12/ras</id><content type="html" xml:base="/tools/2021/10/12/ras.html"><![CDATA[<p>I recently purchased a radial arm saw (RAS) from Craigslist.</p>

<p>Here’s almost what it looks like:</p>

<p><a href="https://commons.wikimedia.org/wiki/File:Radial_arm_saw_osha.jpg"><img src="/assets/img/ras/Radial_arm_saw_osha.jpg" alt="A radial arm saw" class="img-fluid" /></a></p>

<p><em>Image from <a href="https://commons.wikimedia.org/wiki/File:Radial_arm_saw_osha.jpg">Wikimedia Commons</a></em></p>

<p>I can’t post a picture of what it actually looks like because it’s made of a
material that’s too difficult to photograph under the temperatures and pressures
I can achieve in my garage.</p>

<p>Just kidding. I can’t post a picture of it because it’s in pieces right now.</p>

<p>But I’ll tell you how it works. The long thing at the top is called the “arm”.
You can pull the spinning blade down that arm and through your fingers and also
through the thing you want to cut. That kind of cut would usually be called a
“crosscut”.</p>

<p>Mine runs blades 10” in diameter—a 5” radius. The blade is attached directly
to the motor which takes up some space. So in theory it can cut something up to
~3” thick.</p>

<p>What’s neat about a RAS is how many ways you can turn the blade. You can rotate
it in all three axes. Obviously the blade spins around as it cuts, so that’s one
axis. And you can rotate the motor in the other two axes. So basically you can
put the blade at any angle you want. And the arm goes up and down and can be
rotated, too. It can sort of do the job of two or three other dedicated tools. A
RAS is supposed to be very flexible.</p>

<p>This kind of saw was very popular a few decades ago. Probably because it’s so
versatile and because it takes up so much less space than the two or three other
tools it can sort of replace. That’s why I bought this used one. Since then
they’ve fallen out of favor. They have the reputation of being too dangerous.
But the people who love them and still have all their fingers say they’re not
too dangerous if you keep it dialed in and use it correctly.</p>

<p>My RAS is three decades old. I’m not sure how many decades the manufacturer of
my RAS produced them. It’s not from DeWalt who started making them in the mid
20s (as in the one-hundred-years-ago 20s), but still I guess thirty years old is
pretty young for the design.</p>

<p>But thirty years is plenty of time for there to have been <a href="https://www.cpsc.gov/Recalls/2001/CPSC-Emerson-Tool-Co-Announce-Recall-of-Craftsman-Radial-Arm-Saws-Sold-by-Sears-Roebuck-and-Co">a recall</a>
for too many fingers cut off. Which brings me back to why my RAS is in pieces.</p>

<p>One way I plan to help myself keep my fingers is by fine-tuning all its
adjustments. I completely disassembled it, cleaned and degreased the parts that
looked important, and as I put it back together I am adding new grease. I’m also
tightening things that shouldn’t be loose, making sure I don’t over tighten
things that only need to be snug, and sanding down spurs where there shouldn’t
be any.</p>

<p>Now I’m getting to the point where I can start aligning the blade to the table,
to the <a href="https://en.wikipedia.org/wiki/Fence_(woodworking)">fence</a>, and to the
arm. I’ll also align the table to the arm and the arm to the table. Then I’ll
dial it all in with several strategic cuts.</p>

<p>The idea is that a blade that cuts straight, true, smoothly, and precisely will
not only be free of dramatic emergency room visits, but it’ll also make cuts
that look really nice.</p>

<p>Speaking of the strategy and technique for aligning a RAS, I cannot recommend
a book on this subject more highly than Jon Eakes’s
<a href="https://joneakes.com/learning-curve/75-radial-arm-saws">Fine Tuning Your Radial Arm Saw</a>.
His book has been invaluable. It has tons of tips and tricks for getting it set
up simply and effectively, and he walks you through a series of steps with
enough detail to understand why without bogging you down in the minutiae. The
pictures for my brand’s RAS are a little dated (the design must have changed)
but you can still figure out how to apply the principle because he explains why
it works.</p>

<p>I also got some new blades. The blade that came with my purchase could very well
be original to the saw. It wasn’t used heavily, but still it’s not super clean.
Plus it has the wrong angles for crosscutting. Having a nice sharp clean blade
with good angles is supposed to be another way to keep your fingers.</p>

<p>Where am I on the <a href="https://www.gartner.com/en/research/methodologies/gartner-hype-cycle">Hype Cycle</a>?
Things keep looking brighter, so I must not have crested the Peak of Inflated
Expectations yet.</p>]]></content><author><name></name></author><category term="tools" /><summary type="html"><![CDATA[And where I'm at on the Hype Cycle]]></summary></entry><entry><title type="html">Async Method Builders Are Hard</title><link href="/programming/2021/09/30/async-method-builders-are-hard.html" rel="alternate" type="text/html" title="Async Method Builders Are Hard" /><published>2021-09-30T00:00:00-05:00</published><updated>2021-09-30T00:00:00-05:00</updated><id>/programming/2021/09/30/async-method-builders-are-hard</id><content type="html" xml:base="/programming/2021/09/30/async-method-builders-are-hard.html"><![CDATA[<p>C# lets you use asynchronous methods and awaitable expressions. For example, in
C# you can do this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="nf">RunAsync</span><span class="p">();</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">GetAwaiter</span><span class="p">().</span><span class="nf">GetResult</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">RunAsync</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Just a second..."</span><span class="p">);</span>
        <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">));</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Ok!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>…and your program will output “Just a second…”, then nothing will happen for
one second, then it’ll output “Ok!”.</p>

<p>Asynchronous methods are marked by the <code class="language-plaintext highlighter-rouge">async</code> keyword. Awaitable expressions
involve the <code class="language-plaintext highlighter-rouge">await</code> keyword.</p>

<p>But what types can an asynchronous method return?</p>

<p>Any awaitable type that has an asynchronous method builder.</p>

<h2 id="builder-type">Builder type</h2>

<p>Microsoft’s documentation on asynchronous method builders pretty much is limited
to this:</p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/task-types">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/task-types</a></p>

<p>In summary, any type can be returned from an asynchronous method as long as it
is:</p>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#awaitable-expressions">An awaitable type</a></li>
  <li>Decorated with the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.asyncmethodbuilderattribute?view=net-5.0"><code class="language-plaintext highlighter-rouge">AsyncMethodBuilder</code></a>
attribute</li>
  <li>And the attribute points to a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/task-types#builder-type">builder type</a></li>
</ul>

<h2 id="documentation-woes"><del>Documentation woes</del></h2>

<p><del>But Microsoft’s documentation isn’t even correct.</del></p>

<p><del>Of the builder type <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.0/task-types#:~:text=awaitunsafeoncompleted()%20should%20call%20awaiter.oncompleted(action)">it says</a>:</del></p>

<blockquote>
  <p><del><code class="language-plaintext highlighter-rouge">AwaitUnsafeOnCompleted()</code> should call <code class="language-plaintext highlighter-rouge">awaiter.OnCompleted(action)</code></del></p>
</blockquote>

<p><del>That’s not correct. It should call <code class="language-plaintext highlighter-rouge">awaiter.UnsafeOnCompleted(action)</code>. That’s
what Microsoft itself <a href="https://github.com/dotnet/runtime/blob/v5.0.10/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs#L101">does</a>.</del></p>

<p><del>Also, it says:</del></p>

<blockquote>
  <p><del>If the state machine is implemented as a <code class="language-plaintext highlighter-rouge">struct</code>, then
  <code class="language-plaintext highlighter-rouge">builder.SetStateMachine(stateMachine)</code> is called with a boxed instance of the
  state machine that the builder can cache if necessary.</del></p>
</blockquote>

<p><del>And that’s not correct, either. <a href="https://dotnetfiddle.net/bwBmFj">See?</a> (Make
sure you run that code on your local PC; .NET Fiddle doesn’t run it correctly.)</del></p>

<p><em>Edit: These mistakes will be fixed once <a href="https://github.com/dotnet/csharplang/pull/5253">PR 5253</a> goes live.</em></p>

<h2 id="implementation-woes">Implementation woes</h2>

<p>Can <em>you</em> tell me why the below code is a perfectly fine example of an async
method builder in Debug mode or if <code class="language-plaintext highlighter-rouge">CustomAwaitableAsyncMethodBuilder</code> is
changed to a <code class="language-plaintext highlighter-rouge">class</code>, but otherwise will hang and never complete?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">enable</span>
<span class="k">namespace</span> <span class="nn">BrokenAsyncMethodBuilder</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
    <span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
    <span class="k">using</span> <span class="nn">System.Runtime.CompilerServices</span><span class="p">;</span>
    <span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
    <span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

    <span class="p">[</span><span class="nf">AsyncMethodBuilder</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CustomAwaitableAsyncMethodBuilder</span><span class="p">&lt;&gt;))]</span>
    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">CustomAwaitable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">readonly</span> <span class="n">ValueTask</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">_valueTask</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomAwaitable</span><span class="p">(</span><span class="n">ValueTask</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">valueTask</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_valueTask</span> <span class="p">=</span> <span class="n">valueTask</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">ValueTaskAwaiter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">GetAwaiter</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">_valueTask</span><span class="p">.</span><span class="nf">GetAwaiter</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">struct</span> <span class="nc">CustomAwaitableAsyncMethodBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="c1">//     ^^^^^^ Only works if you change this to `class` or run in Debug mode</span>
    <span class="p">{</span>
        <span class="err">#</span><span class="n">region</span> <span class="n">fields</span>

        <span class="n">Exception</span><span class="p">?</span> <span class="n">_exception</span><span class="p">;</span>
        <span class="kt">bool</span> <span class="n">_hasResult</span><span class="p">;</span>
        <span class="n">SpinLock</span> <span class="n">_lock</span><span class="p">;</span>
        <span class="n">T</span><span class="p">?</span> <span class="n">_result</span><span class="p">;</span>
        <span class="n">TaskCompletionSource</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;?</span> <span class="n">_source</span><span class="p">;</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">properties</span>

        <span class="k">public</span> <span class="n">CustomAwaitable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Task</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">lockTaken</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="n">_lock</span><span class="p">.</span><span class="nf">Enter</span><span class="p">(</span><span class="k">ref</span> <span class="n">lockTaken</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_exception</span> <span class="k">is</span> <span class="n">not</span> <span class="k">null</span><span class="p">)</span>
                        <span class="k">return</span> <span class="k">new</span> <span class="n">CustomAwaitable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">ValueTask</span><span class="p">.</span><span class="n">FromException</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">_exception</span><span class="p">));</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_hasResult</span><span class="p">)</span>
                        <span class="k">return</span> <span class="k">new</span> <span class="n">CustomAwaitable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">ValueTask</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">_result</span><span class="p">!));</span>
                    <span class="k">return</span> <span class="k">new</span> <span class="n">CustomAwaitable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
                        <span class="k">new</span> <span class="n">ValueTask</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
                            <span class="p">(</span><span class="n">_source</span> <span class="p">??=</span> <span class="k">new</span> <span class="n">TaskCompletionSource</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">TaskCreationOptions</span><span class="p">.</span><span class="n">RunContinuationsAsynchronously</span><span class="p">))</span>
                            <span class="p">.</span><span class="n">Task</span>
                        <span class="p">)</span>
                    <span class="p">);</span>
                <span class="p">}</span>
                <span class="k">finally</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">lockTaken</span><span class="p">)</span>
                        <span class="n">_lock</span><span class="p">.</span><span class="nf">Exit</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="n">AwaitOnCompleted</span><span class="p">&lt;</span><span class="n">TAwaiter</span><span class="p">,</span> <span class="n">TStateMachine</span><span class="p">&gt;(</span>
            <span class="k">ref</span> <span class="n">TAwaiter</span> <span class="n">awaiter</span><span class="p">,</span>
            <span class="k">ref</span> <span class="n">TStateMachine</span> <span class="n">stateMachine</span><span class="p">)</span>
            <span class="k">where</span> <span class="n">TAwaiter</span> <span class="p">:</span> <span class="n">INotifyCompletion</span>
            <span class="k">where</span> <span class="n">TStateMachine</span> <span class="p">:</span> <span class="n">IAsyncStateMachine</span> <span class="p">=&gt;</span>
            <span class="n">awaiter</span><span class="p">.</span><span class="nf">OnCompleted</span><span class="p">(</span><span class="n">stateMachine</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">void</span> <span class="n">AwaitUnsafeOnCompleted</span><span class="p">&lt;</span><span class="n">TAwaiter</span><span class="p">,</span> <span class="n">TStateMachine</span><span class="p">&gt;(</span>
            <span class="k">ref</span> <span class="n">TAwaiter</span> <span class="n">awaiter</span><span class="p">,</span>
            <span class="k">ref</span> <span class="n">TStateMachine</span> <span class="n">stateMachine</span><span class="p">)</span>
            <span class="k">where</span> <span class="n">TAwaiter</span> <span class="p">:</span> <span class="n">ICriticalNotifyCompletion</span>
            <span class="k">where</span> <span class="n">TStateMachine</span> <span class="p">:</span> <span class="n">IAsyncStateMachine</span> <span class="p">=&gt;</span>
            <span class="n">awaiter</span><span class="p">.</span><span class="nf">UnsafeOnCompleted</span><span class="p">(</span><span class="n">stateMachine</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">);</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">methods</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">CustomAwaitableAsyncMethodBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">Create</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_lock</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SpinLock</span><span class="p">(</span><span class="n">Debugger</span><span class="p">.</span><span class="n">IsAttached</span><span class="p">)</span>
        <span class="p">};</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">SetException</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">lockTaken</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">_lock</span><span class="p">.</span><span class="nf">Enter</span><span class="p">(</span><span class="k">ref</span> <span class="n">lockTaken</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">Volatile</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="k">ref</span> <span class="n">_source</span><span class="p">)</span> <span class="k">is</span> <span class="p">{}</span> <span class="n">source</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">source</span><span class="p">.</span><span class="nf">TrySetException</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">_exception</span> <span class="p">=</span> <span class="n">exception</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">lockTaken</span><span class="p">)</span>
                    <span class="n">_lock</span><span class="p">.</span><span class="nf">Exit</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">SetResult</span><span class="p">(</span><span class="n">T</span> <span class="n">result</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">lockTaken</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">_lock</span><span class="p">.</span><span class="nf">Enter</span><span class="p">(</span><span class="k">ref</span> <span class="n">lockTaken</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">Volatile</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="k">ref</span> <span class="n">_source</span><span class="p">)</span> <span class="k">is</span> <span class="p">{}</span> <span class="n">source</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">source</span><span class="p">.</span><span class="nf">TrySetResult</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">_result</span> <span class="p">=</span> <span class="n">result</span><span class="p">;</span>
                    <span class="n">_hasResult</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">lockTaken</span><span class="p">)</span>
                    <span class="n">_lock</span><span class="p">.</span><span class="nf">Exit</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">SetStateMachine</span><span class="p">(</span><span class="n">IAsyncStateMachine</span> <span class="n">stateMachine</span><span class="p">)</span> <span class="p">{}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="n">Start</span><span class="p">&lt;</span><span class="n">TStateMachine</span><span class="p">&gt;(</span><span class="k">ref</span> <span class="n">TStateMachine</span> <span class="n">stateMachine</span><span class="p">)</span>
            <span class="k">where</span> <span class="n">TStateMachine</span> <span class="p">:</span> <span class="n">IAsyncStateMachine</span> <span class="p">=&gt;</span> <span class="n">stateMachine</span><span class="p">.</span><span class="nf">MoveNext</span><span class="p">();</span>

        <span class="err">#</span><span class="n">endregion</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Main</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">().</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="k">async</span> <span class="n">CustomAwaitable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetValueAsync</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Yield</span><span class="p">();</span>
                <span class="k">return</span> <span class="n">expected</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="k">await</span> <span class="nf">GetValueAsync</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(!</span><span class="nf">ReferenceEquals</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">))</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">();</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Done!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://stackoverflow.com/a/69397857/3063273">Here’s the answer</a>. Guess how
long it took me to figure that one out? I was pondering this <em>for a day or so</em>
before I posted the question on StackOverflow. And then the only way I found out
was by using <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a> on the compiled .dll,
and then only by configuring ILSpy in a specific way.</p>

<p>How are people supposed to know this stuff?</p>

<h3 id="inevitable-heap-allocations">Inevitable heap allocations</h3>

<p>Not long ago I wrote “Async and Await in C# vs Rust”. In that article
<a href="/programming/2021/09/16/async-await-csharp-rust.html#:~:text=async%2Fawait%20system%3A-,C%23%20awaitable%20expressions%20are,something%20on%20the%20heap.,-And%20invoking%20an">I pointed out</a>:</p>

<blockquote>
  <p>C# awaitable expressions are composed with callbacks. These callbacks have the
  type <code class="language-plaintext highlighter-rouge">Action</code>, which is a delegate. To package something (e.g. a step in a
  state machine) up into an <code class="language-plaintext highlighter-rouge">Action</code> you have to put something on the heap.</p>
</blockquote>

<p>Well, the exact same thing rears its head in async method builders. Async method
builders themselves <em>must</em> create a boxed reference to the async state machine
at some point. Otherwise you run into the above problem.</p>

<p>The StackOverflow answer I linked to above has enough detail to figure out why.
But basically it comes down to the fact that the async state machines are driven
forward by <code class="language-plaintext highlighter-rouge">Action</code> delegates. It’s the other side of the same coin.</p>

<p>Not only is it impossible to compose awaitable expressions without heap
allocations, it’s not even possible to have an <code class="language-plaintext highlighter-rouge">async</code> method at all without
heap allocations.</p>

<h2 id="the-point">The point</h2>

<p>Microsoft’s implementation of async/await has some flaws. You might not think
they’re very serious, but I think you’ll at least agree that C#’s async method
builders are hard to implement!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[A peek under the hood of C#, and a complaint about Microsoft's documentation]]></summary></entry><entry><title type="html">Short Circuit Protection</title><link href="/computers/2021/09/17/short-circuit.html" rel="alternate" type="text/html" title="Short Circuit Protection" /><published>2021-09-17T00:00:00-05:00</published><updated>2021-09-17T00:00:00-05:00</updated><id>/computers/2021/09/17/short-circuit</id><content type="html" xml:base="/computers/2021/09/17/short-circuit.html"><![CDATA[<p>My PC power supply recently bit the dust. It was during a storm when the power
cut out. My PC wouldn’t turn back on afterward. Maybe a power surge? At any
rate, I ordered a new power supply and it finally arrived yesterday evening.</p>

<p>And I’m happy to report that my new power supply has short circuit protection.
Here’s how I found out.</p>

<hr />

<p>I took the cover off my PC case and freed the old power supply from its screws.
Both the old and the new power supply are modular: instead of all the cables
dangling out of it you only plug in the ones you need. So I unplugged all the
cables from the power supply end. “This will be an easy job” I thought to
myself, “all I have to do is drop the new power supply in and replug all these
modular cables.”</p>

<p>Wrong.</p>

<p>First I noticed the main motherboard power connector (the big 24 pin one) was
different. Of course it’s the same on the motherboard end, but on the power
supply the 24 pins are split up into two plugs: something random like 10 pins on
one plug and the remaining 12 pins on another one; two different modular slots
separated by a little distance on the power supply. Did motherboards used to
only take 10 or 12 pin connectors? It was clear that my old plug was not going
to work.</p>

<p>“No problem, I’ll just use the cable that came with the new power supply.”</p>

<p>Next was the auxiliary 8 pin motherboard power plug. Both ends fit.</p>

<p>“Good.”</p>

<p>The graphics card power plug was different on the power supply side. It had the
same number of pins in the same pattern, but they were keyed slightly different.
I don’t really like the new cord. It is flat instead of braided so it doesn’t
sit right in the case. And it has two graphics card plugs on the one end even
though I only have one graphics card. Who wants an extra plug dangling in their
case?</p>

<p><em>Mumble grumble.</em> Out with the old cord, in with the new.</p>

<p>Finally, the two or three strings of hard drive power plugs. Again, exactly the
same on the hard drive side of things, and exactly the same number of pins in
the same pattern on the power supply side. But keyed differently.</p>

<p>“Ugh, why are they doing this to me?”</p>

<p>The other side of the case came off to expose the important ends of my hard
drives. I carefully dissected the kraken’s tangled mess of tentacles. After some
time and effort I had the old power strings in my hand. Next I cautiously
inserted the new strings’ plugs.</p>

<p>“I hope I didn’t accidentally bump any of these SATA connectors.”</p>

<p>And I was done!</p>

<p>On went the case panels, up went my PC onto its little shelf, in went the power
cord and USB plugs and display cords, down went my finger onto the power button.</p>

<p>Nothing.</p>

<p>“I <em>think</em> I pressed the power button?”</p>

<p>I poked it again. Still nothing.</p>

<p>“Hmm… Maybe the power surge destroyed my motherboard too? Why do I buy such
cheap surge protectors?”</p>

<p>I knew I still had the bent paperclip laying around that I had used to jumper
the old power supply as I diagnosed it. I grabbed that, took the side panel off,
unplugged the motherboard end of the fat 24-pin motherboard power cable, and
carefully inserted the paperclip into the correct two pins.</p>

<p>There was a very faint click from a solenoid in the power supply, then nothing.</p>

<p>I did it again just to see. Same thing. Again. And, there were a couple of faint
clicks, like it was groggily waking up but then something was urgently shouting
at it “Quick!! Save yourself!!” in the midst of other terrified screams and in a
panic it would stumble over itself as it rushed to disconnect itself from the
mains.</p>

<p>Perplexed, I unplugged everything from the power supply.</p>

<p>“Good thing this power supply is modular!”</p>

<p>And I tried again. Just a single click this time.</p>

<p>“That sounds like a normal turning on click to me. Not a panicky click.”</p>

<p>Time for process of elimination. In went the graphics card plug. Fine. The hard
drive plugs. Fine. The big fat 24 pin motherboard plug and the smaller 8 pin aux
power plug.</p>

<p>Not fine.</p>

<p>Actually, there was a very brief flash of light coming from somewhere in the
case.</p>

<p>Now, a flash of light by itself is nothing unusual. They stick LEDs on
everything. I hate them, but the WiFi card has one, some aim out the back of my
motherboard, they’re everywhere. I feel like I had to pay extra to buy RAM
without LEDs. Why would someone want LEDs on their RAM??</p>

<p>“Okay, it doesn’t like my motherboard. But where is that light coming from?”</p>

<p>I kept turning it on. Sometimes there would be two clicks from the power supply.
Sometimes there would be several. The poor power supply was going to have PTSD.
But I had to find that brief flash of light.</p>

<p>And I discovered it wasn’t coming from the open side of the case. It wasn’t
coming from anything in or on the <em>top</em> of the motherboard, but instead I could
see the flash coming from <em>behind</em> the lower corner.</p>

<p>“Oh great, did I drop a screw in there or something?”</p>

<p>I imagined all the things that could have fallen into the holes in the back of
the case.</p>

<p>Out came all the SATA plugs. Out came the graphics card and WiFi card. Out came
the motherboard power plugs. Out came all the screws holding the motherboard in
place. Out came the motherboard.</p>

<p>“Hmm. No loose screws laying around behind the motherboard. Just dust.”</p>

<p>I flipped it around and searched for the scorch marks. Nothing.</p>

<p>Well there had to be something making that light. I looked closer.</p>

<p>And then I saw it: two strings of surface mount LEDs.</p>

<p>On the <em>back</em> of my motherboard.</p>

<p><em>Groan!</em></p>

<p>“I am never buying a single LED ever for the rest of my life. I’m not even going
to talk to anyone who has anything to do with LEDs or anything that LEDs go on,
in, or around. I don’t even like the letter ‘L’ anymore.”</p>

<p>What in the world were they doing on the <em>back</em> of my motherboard?? Diagnostic
lights? Mood lighting? Well all this diagnosing wasn’t putting me in a light
mood.</p>

<p>Okay, it definitely wasn’t arcing. I should have known: the hue wasn’t quite
right, and it was silent. Well at least the light has a legitimate claim to
existence; <em>someone</em> wanted light to come out the back of the motherboard, and
here light was coming out the back. I couldn’t blame the light for doing what it
was designed to do.</p>

<p>In went the motherboard to the case. In went the motherboard screws.</p>

<p>“Hmm. Maybe I’ll do process of elimination again, just to be extra sure.”</p>

<p>In went the 24 pin motherboard plug (and the case power switch plug). I poked
the power button.</p>

<p>And everything sprang to life! I had left the hard drive power cords plugged
into the power supply; they were happily whirring away. My CPU fan was spinning
its little heart out.</p>

<p>Wow! What a wonderful chorus.</p>

<p>“Maybe my graphics card?”</p>

<p>In went the graphics card power. Fine! I could just hear all the money I was
saving by not replacing all these components. What a beautiful noise.</p>

<p>“A short in some case accessory, maybe one of the USB plugs?”</p>

<p>In went all the case accessories and fans. Fine!</p>

<p>I was getting tired of saving money. There was a problem to solve. What in the
world went wrong??</p>

<p>“Wait a minute, what’s this one cord still dangling here?”</p>

<p>I had forgotten about the 8-pin motherboard auxiliary power plug. I guess it
really is auxiliary after all? But it was dangling and begging for a home, so I
plugged it back in.</p>

<p><em>Click.</em></p>

<p>Aha! The culprit, caught red-handed!</p>

<p>I looked closer at that cord and compared it to the new one. Of course the
motherboard side was identical on both. And the power supply side was physically
keyed the same. But there was an empty pin in one place on the one cord, and an
empty pin in a different place on the other cord.</p>

<p>They were wired differently! I was sending 12V straight to ground! A short
circuit!</p>

<h1 id="️">🤦‍♂️</h1>

<h2 id="the-point">The point</h2>

<p>Don’t mix and match modular power supply cables from different manufacturers.</p>]]></content><author><name></name></author><category term="computers" /><summary type="html"><![CDATA[I'm happy to report that my power supply has it]]></summary></entry></feed>