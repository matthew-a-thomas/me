<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-15T11:23:58-05:00</updated><id>/feed.xml</id><entry><title type="html">Fissiparousness and Perspicuity</title><link href="/christian/2023/08/12/fissiparousness-and-perspicuity.html" rel="alternate" type="text/html" title="Fissiparousness and Perspicuity" /><published>2023-08-12T00:00:00-05:00</published><updated>2023-08-12T00:00:00-05:00</updated><id>/christian/2023/08/12/fissiparousness-and-perspicuity</id><content type="html" xml:base="/christian/2023/08/12/fissiparousness-and-perspicuity.html"><![CDATA[<p>Casey Chalk wrote
<a href="https://www.catholic.com/magazine/online-edition/the-protestants-biggest-bible-problem">an article on Catholic.com</a>.</p>

<p>I’d like to quote a large section of it. Then I’d like to quibble over words. Then I’d like to put the quibble’s feet on
the ground and make it relevant.</p>

<h2 id="a-long-quote">A long quote</h2>

<p>Mr. Chalk states:</p>

<blockquote>
  <p>I spent a couple years of my life as a Protestant trying to identify what the Bible really teaches about justification
  and baptism. What I discovered is a proliferation of divergent Protestant opinions that grows—and becomes all the more
  esoteric (and by extension, unclear)—with each generation. I realized that in the end, it was up to me to decide which
  Protestant camp to which I would align myself. Even if I cited trusted pastors, theologians, and biblical scholars,
  <em>I</em> was the one deciding who those trusted authorities would be.</p>

  <p>For those Protestants who still subscribe to <em>sola scriptura</em> (many don’t—another obvious problem), perspicuity has
  proved incapable of determining the Bible’s supposed “plain meaning.” Because they can’t agree on that “plain
  meaning,” they’re forced to make recourse to secondary authorities, but they disagree over which of <em>those</em>
  authorities are trustworthy. This is the reason Protestantism is so thoroughly individualist and subjective: every
  single Protestant can’t help but be his own authority when it comes to divine revelation and its meaning.</p>

  <p>Granted, the earliest Reformers did not intend this. They believed that a corrupted and wicked Catholic Church had
  obscured what was clear. The Reformers’ self-defined mission was simply to get the Bible into the hands of individual
  people so that all persons of faith could divine its clear teachings. It didn’t play out that way—not even in their
  lifetime, as the debate between Luther and Zwingli over the Eucharist at the Marburg Colloquy demonstrated.</p>

  <p>The Bible <em>isn’t</em> clear—at least not in the sense that Protestants claim. More than five hundred years of Protestant
  history should make that obvious. Christians require a different paradigm for interpreting the Bible, one that is
  coherent, that is historically and intellectually defensible, and that drives us to Christ rather than into ourselves.
  And that model exists in the Catholic Church.</p>
</blockquote>

<h2 id="a-quibble-over-authority">A quibble over authority</h2>

<p>His article is about the perspicuity of scripture. But I’d like to zoom in on the question of authority.</p>

<p><em>Who has the authority to decide what you believe</em>?</p>

<p>He said he was trying to flee a particular “problem”:</p>

<blockquote>
  <p>Even if I cited trusted pastors, theologians, and biblical scholars, [as a Protestant] <em>I</em> was the one deciding who
  those trusted authorities would be.</p>
</blockquote>

<p>The author said he was formerly a Protestant. Now he is writing as a Catholic. Logically, one cannot be both Protestant
and Catholic at the same time. So for some amount of time between the two (perhaps a very brief time) he was neither
Protestant nor Catholic. And it was in this time that he decided to be Catholic.</p>

<p>Let me reiterate that: <em>he</em> decided <em>for himself</em> who <em>his</em> <u>individual</u> trusted authority should be. Which is what
he said he didn’t want to do.</p>

<p>So what exactly is his beef with an individual deciding who to trust?</p>

<h3 id="the-knowledge-of-authority">The knowledge of authority</h3>

<p>Let me throw another question out there: how sure is Mr. Chalk about his decision? Does he know this <em>infallibly</em>?
Because if he doesn’t know it infallibly then <em>maybe he’s wrong about the Catholic Church</em>. (Insert scary music here.)</p>

<p>To quote
<a href="https://www.catholic.com/magazine/online-edition/the-best-argument-for-sola-scriptura">Karlo Broussard’s article</a> (also
on Catholic.com), these are supposedly the ways in which a person can have infallible knowledge of something:</p>

<ol>
  <li>
    <p><em>We directly sense something</em>. For example, when I see the tree outside, I have an immediate and direct sense
experience of the tree and thereby infallibly know that the tree exists (a view known as direct realism).</p>
  </li>
  <li>
    <p><em>A claim is reduced to a violation of a first principle</em>, like the principle of non-contradiction (PNC)—that is, that
something can’t both be and not be in the same respect at the same place and time. If a claim were to violate the
PNC, we would infallibly know that the claim is false because the PNC cannot be denied without presupposing its
validity. (See my new book The New Relativism: Unmasking the Philosophy of Today’s Woke Moralists.) When a principle
can’t be denied like this, that’s a sure sign it’s true.</p>
  </li>
  <li>
    <p><em>A claim about reality that is itself directly confirmed by a miracle (or miracles)</em>. Given that miracles require
divine power, and God can’t confirm falsehood, miraculous confirmation would give us infallible knowledge that the
prophet’s claim is backed by God and thereby true.</p>
  </li>
  <li>
    <p><em>A claim is definitively made by someone who has been given authority</em> to speak on behalf of God, either by God
himself or by another whose authority is miraculously confirmed. Even though such a person might not have miraculous
confirmation directly associated with his claim, there is a transfer of divine authority that’s been already
established.</p>
  </li>
  <li>
    <p><em>God reveals something to you or me directly</em>.</p>
  </li>
</ol>

<p>For the record, I’m not agreeing with Mr. Broussard. But he sounds like an authority in Catholicism so let’s apply his
approach to one of his fellows. Let’s now consider which of these Mr. Chalk might appeal to for having infallible
knowledge as to the authority of the Catholic church.</p>

<ol>
  <li>
    <p>Direct sense doesn’t apply here.</p>
  </li>
  <li>
    <p>I struggle to see the connection to first principles. I’m assuming Mr. Chalk didn’t see a connection either.</p>
  </li>
  <li>
    <p>Most Catholics I know aren’t Catholic because they witnessed a miracle. I’m assuming Mr. Chalk didn’t, either.</p>
  </li>
  <li>
    <p>“Someone with authority made a clear claim” sounds relevant. I’ll explore this more.</p>
  </li>
  <li>
    <p>Similar to #3, I’m assuming this wasn’t the case for Mr. Chalk.</p>
  </li>
</ol>

<p>But here’s the problem with #4. It’s question begging. Try this sentence on for size: “Mr. Chalk knows the Catholic
Church is authoritative because it said so, and Mr. Chalk knows the Catholic Church is authoritative”. To make the
question begging more clear, I’ll put that into a syllogism:</p>

<ol>
  <li>
    <p>Mr. Chalk knows the Catholic Church has authority</p>
  </li>
  <li>
    <p>The Catholic Church said it has authority</p>
  </li>
  <li>
    <p>Therefore, Mr. Chalk knows the Catholic Church has authority</p>
  </li>
</ol>

<p>There’s nothing in the conclusion that is not already stated in a premise. Classic question begging.</p>

<p>And question begging is a violation of a first principle. Therefore, if the above is how a person arrives at infallible
knowledge, then I know infallibly that Mr. Chalk does <em>not</em> have infallible knowledge about the Catholic Church’s
authority.</p>

<p>I’ll say it again: <em>he</em> decided <em>for himself</em> who <em>his</em> <u>individual</u> trusted authority should be.</p>

<p>So what exactly is his beef with an individual deciding who to trust (even though he did it himself)?</p>

<h3 id="fissiparousness">Fissiparousness</h3>

<p>He says it’s an issue of fissiparousness. To quote Mr. Chalk:</p>

<blockquote>
  <p>And that explains the fissiparous five-century history of Protestantism, making every self-identifying Christian into
  his own pope.</p>
</blockquote>

<p>But how does Mr. Chalk know <em>infallibly</em> that fissiparousness doesn’t exist within his own walls of paradise? Because
the Catholic Church says so? But we’ve already established that Mr. Chalk doesn’t <em>really</em> know that the Catholic Church
is right, at least not with the same level of certainty that he requires Protestants to have of everything in scripture.</p>

<p>And we all know that division has haunted even the Catholic Church. And even to this day.</p>

<p>So why does any of this even matter? Am I wasting my time writing this? Is this just a pointless argument? Are you
wasting your time reading it?</p>

<h2 id="where-it-actually-matters">Where it actually matters</h2>

<blockquote>
  <p>I’d like to make a controversial claim.</p>
</blockquote>

<p>So would I:</p>

<p><i>You can be forgiven of all your sins, past present and future. You can gain the inheritance of the saints in light.
You can go directly to heaven when you die (without stopping in purgatory). All you have to do is ask Jesus to forgive
you and trust that he has.</i></p>

<p>You won’t need a priest to absolve you. This can happen right now in the privacy of your own home.</p>

<p>You won’t need to wonder if you are in God’s grace. Your faith will produce undeniable fruit proving that you are.</p>

<p>You won’t need a weekly dose of sacraments to top up your splashing and spilling jar of grace. Your righteousness will
be firmly seated in heaven at the right hand of the Father.</p>

<p>By what authority do I make these claims? By God’s authority. Because these things are clear in scripture, which is
God’s word.</p>

<blockquote>
  <p>All things in Scripture are not alike plain in themselves, nor alike clear unto all: yet those things which are
  necessary to be known, believed, and observed for salvation are so clearly propounded, and opened in some place of
  Scripture or other, that not only the learned, but the unlearned, in a due use of the ordinary means, may attain unto
  a sufficient understanding of them.</p>
</blockquote>

<p>Do I know this <em>infallibly</em>? No of course not, but I’m certain enough to act on it. You should act on it, too.</p>]]></content><author><name></name></author><category term="christian" /><summary type="html"><![CDATA[Interacting with a Catholic notion of authority as it touches on the Bible]]></summary></entry><entry><title type="html">The Sufficiency of Scripture</title><link href="/christian/2023/08/05/sufficiency-of-scripture.html" rel="alternate" type="text/html" title="The Sufficiency of Scripture" /><published>2023-08-05T00:00:00-05:00</published><updated>2023-08-05T00:00:00-05:00</updated><id>/christian/2023/08/05/sufficiency-of-scripture</id><content type="html" xml:base="/christian/2023/08/05/sufficiency-of-scripture.html"><![CDATA[<p>Matthew Barrett <a href="https://www.thegospelcoalition.org/essay/the-sufficiency-of-scripture/">wrote an essay on TGC</a> titled
“The Sufficiency of Scripture”.</p>

<h2 id="summary-of-the-article">Summary of the article</h2>

<p>Here is the definition and summary given by Barrett:</p>

<h3 id="definition">Definition</h3>

<blockquote>
  <p>Scripture is sufficient in that it is the only inspired, inerrant, and therefore final authority for Christians for
  faith and godliness, with all other authorities being subservient to Scripture.</p>
</blockquote>

<h3 id="summary">Summary</h3>

<blockquote>
  <p>The sufficiency of Scripture is a doctrine challenged on multiple fronts. Ever since the Reformation, Rome challenged
  Scripture’s sufficiency in claiming that an infallible tradition and papal magisterium was necessary to provide the
  correct interpretation of Scripture. In response, the Reformers asserted that Scripture is a sufficient authority for
  all things pertaining to faith and godliness, not needing to appeal to another authority. However, this does not mean
  that Scripture functions alone apart from any other source or authority; rather, all other authorities serve under
  Scripture, while Scripture rules over them as the final and inspired authority from God.</p>
</blockquote>

<h2 id="study-guide-answers">Study guide answers</h2>

<p>These are my answers to a study guide given by my pastor.</p>

<ol>
  <li>Does the sufficiency of Scripture mean we don’t need or shouldn’t use any other confessions, books, or sources in
our studies? Why or why not? Does the sufficiency of Scripture mean that it is the only authority? If not, what is
the relationship between Scripture and other authorities?
    <blockquote>
      <p>No, Barrett states</p>
      <blockquote>
        <p>With that in mind, the Christian need not fear the use of extrabiblical sources. In fact, the Christian should
    have no hesitancy learning from, appealing to, and utilizing extrabiblical sources.</p>
      </blockquote>

      <p>Barrett contrasts <em>sola scriptura</em> with <em>nuda scriptura</em>, the view that scripture is the <em>only</em> rule of faith to
  the exclusion of all other
  sources<a href="https://en.wikipedia.org/wiki/Nuda_scriptura#:~:text=the%20view%20that%20scripture%20is%20the%20only%20rule%20of%20faith%20to%20the%20exclusion%20of%20all%20other%20sources">*</a>. Evidently that view was found among the Anabaptists and radical reformers, and appears in modern day Fundamentalism. It appears that <em>nuda scriptura</em> is appealing to people who wish to
  emphasize the role of the Bible in daily life. However, it can lead to confusion about what exactly another
  “authority” or “tradition” might be. For example one might think that just because one’s church does not belong to
  a denomination, that church is therefore free from the theological influence of tradition. And this can lead
  people to elevate the position and authority of traditions within that individual church. Because if people think
  everything that church does and believes arises from the Bible and from the Bible alone, then things which are in
  fact mere tradition and artifacts of history begin to capture people’s consciences.</p>

      <p><em>Sola scriptura</em>, on the other hand, explicitly allows room for other authorities to function with scripture. But
  in a way that they serve and are corrected by scripture. The Apostles’ Creed, for example, is a wonderful
  distillation of truths arising from scripture. And it is also true that the Apostles’ Creed is not immune to
  critical thinking by interpreters of scripture—for example, what does it mean that “Christ descended into
  hell [and arose three days later]” when he promised the repentant thief “today you will be with me in paradise”
  Luke 23:43 (and arose three days later)? <em>Sola scriptura</em> empowers you to answer that question from scripture with
  a free conscience.</p>

      <p>I also find it helpful to think about the role of
  <a href="/christian/2023/08/02/scripture-as-divine-revelation.html">General Revelation</a> in relation to Special
  Revelation. Both are revelation from God. And if Special Revelation is true because God is true, then General
  Revelation is also just as true. Therefore, General Revelation is infallible. Therefore it’s legitimate to reason
  and draw conclusions from General Revelation, just as we do from scripture. However, we ought to be careful by
  remembering that General Revelation is less specific than scripture in many matters. And so we ought to reject any
  conclusions drawn from General Revelation that contradict necessary deductions from scripture. For example, even
  though a large body of science claims that the earth is many billions of years old, the Christian is more than
  free to reject that inference on the grounds of good and necessary deductions from scripture. And at the same time
  even people without access to the bible are obligated to believe that there is an eternal uncreated being—if
  anything exists and is an effect then by deduction there is an Uncaused Cause, and everyone knows that they their
  self exist, and only exist contingently. And so we see that good and necessary deductions can be drawn from sources
  other than scripture and can rightly bind people’s consciences, and scripture stands supreme.</p>
    </blockquote>
  </li>
  <li>What is the difference between the Roman Catholic view of Scripture’s sufficiency and the view of the Reformers?
    <blockquote>
      <p>Barrett says:</p>
      <blockquote>
        <p>Rome challenged Scripture’s sufficiency, claiming that an infallible tradition and papal magisterium is also
    needed to provide the one, true interpretation of Scripture. This conclusion stems from their assumption that
    tradition is a second infallible source or conduit of divine revelation.</p>
      </blockquote>

      <p>The Catechism of the Catholic Church states,
  <a href="https://www.vatican.va/archive/ENG0015/__PK.HTM">beginning in paragraph 75</a>, the following things:</p>
      <ul>
        <li>Christ commanded the Apostles to preach the Gospel</li>
        <li>The Gospel was handed on in two ways: orally (leading to Sacred Tradition), and in writing (as Sacred Scripture
  and in later writings contributing to Sacred
  Tradition)<a href="https://www.vatican.va/archive/ENG0015/__PK.HTM#:~:text=handed%20on%20in%20two%20ways">*</a></li>
        <li>The authority to preach the Gospel was passed along through generations of bishops as successors to the
  Apostles<a href="https://www.vatican.va/archive/ENG0015/__PK.HTM#:~:text=bishops%20as%20their%20successors">*</a></li>
        <li>Both of these avenues of teaching preserve and perpetuate the Gospel and together are a “living transmission”
  called Sacred
  Tradition<a href="https://www.vatican.va/archive/ENG0015/__PK.HTM#:~:text=78%20This-,living%20transmission,-%2C%20accomplished%20in%20the">*</a></li>
        <li>Both Scripture and Tradition are compatible, bound closely together, and inform one another in a dynamic flowing
  way<a href="https://www.vatican.va/archive/ENG0015/__PL.HTM#:~:text=bound%20closely%20together">*</a></li>
        <li>Both Scripture and Tradition must be accepted and honored with equal sentiments of devotion and
  reverence<a href="https://www.vatican.va/archive/ENG0015/__PL.HTM#:~:text=Both%20Scripture%20and%20Tradition%20must%20be%20accepted%20and%20honoured%20with%20equal%20sentiments%20of%20devotion%20and%20reverence">*</a></li>
      </ul>

      <p><br />
The Catholic Church finds the ability for herself to keep Scripture and Tradition in sync. In the above section of
  the Catechism she claims the help of the Holy Spirit. Additionally,
  <a href="https://www.vatican.va/archive/ENG0015/__PM.HTM#:~:text=The%20task%20of,Bishop%20of%20Rome.">paragraph 85</a>
  says:</p>
      <blockquote>
        <p>The task of giving an authentic interpretation of the Word of God, whether in its written form or in the form of
    Tradition, has been entrusted to the living teaching office of the Church alone. Its authority in this matter is
    exercised in the name of Jesus Christ. This means that the task of interpretation has been entrusted to the
    bishops in communion with the successor of Peter, the Bishop of Rome.</p>
      </blockquote>

      <p><br />
One could easily imagine that over time any teaching not committed to writing for preservation would tend to be
  corrupted and then lost, and any later doctrines built on such a foundation would be suspect. In Jesus’ day the
  Pharisees had so elevated their own tradition (which became corrupt over time) that it rose in practice to the
  position of supreme authority because it was their lens for authoritatively interpreting scripture, resulting in
  their own damnation (Matthew 23). And so Rome is correct to identify that it is dangerous to depart from scripture.
  The Catholic Church seeks shelter by appealing to two things: the Holy Spirit who keeps the Church from corruption;
  and to the inherited ability to tell people what the bible <em>really</em> says.</p>

      <p>Logically, with these safeguards in place there would be no possibility for Sacred Tradition to contradict Sacred
  Scripture in the eyes of lay people. Lay people are not allowed to understand Sacred Scripture in any other way
  than is delivered to them by the Church. Similarly, the teachers of the lay people are not allowed to teach
  anything from Sacred Scripture except what accords with their current understanding of Sacred Tradition. Instead,
  those teachers are excommunicated who contradict teachings of the Church.</p>

      <p>To assert these things as true, however, is question begging. How can a person know that the Catholic Church
  actually possesses the authority to infallibly interpret scripture? You have to accept the conclusion in order to
  believe the premise.</p>

      <p>And it’s my opinion that the Catholic Church has tied herself up in knots trying to maintain this over the
  centuries.</p>

      <p>The view of the Reformers stands in stark contrast. The Reformers recognized that God’s word has no equal, and
  that the bible is God’s word while other streams of teaching are not, even though other streams of teaching do
  often overlap significantly with the bible. Scripture alone bears the privilege of making people wise for salvation; other streams of gospel teaching are only profitable inasmuch as they align with scripture.</p>

      <p>Consequences of <em>sola scriptura</em> include the following:</p>
      <ul>
        <li>The ability for lay people to recognize mere traditions of men</li>
        <li>The ability for anyone to be freed from the burden they impose</li>
        <li>The ability to rest in Christ and simply trust him, knowing that no other means of salvation will arise in the
  future, and nothing else will ever be required for our justification</li>
      </ul>
    </blockquote>
  </li>
  <li>What are two ways that modern Christians deny the sufficiency of Scripture, if not with their words, with their
actions?
    <blockquote>
      <p>Modern Christians can learn something from the Reformation with regard to <em>sola scriptura</em>. Barrett gives these
  examples:</p>
      <ul>
        <li>Personal experience ought not act as a sieve which sifts scripture</li>
        <li>Pragmatism and sensitivity to the culture’s felt needs ought to yield to scripture
          <ul>
            <li>Scripture ought to be front and center in all songs and sermons</li>
          </ul>
        </li>
      </ul>

      <p><br />
This makes me think of how people tend to judge the continuation of certain Spiritual Gifts. On the one hand some
  will point to personal experience and say “I’ve seen them in action”, and that is the reason they believe it. This
  fails to let scripture judge the situation. But on the other hand some will construct an elaborate argument from
  scripture for why they cannot possibly be happening today, and the argument is full of statements like “and
  wouldn’t it make sense if …”, yet they seek to bind people’s consciences with this conclusion. This elevates a
  tradition of man insofar as such conclusions are <em>not</em> necessary conclusions from scripture. I’m not prepared to
  engage the issue much deeper than that, but it comes to mind.</p>

      <p>This also reminds me of how contemporary music tends to be introduced into churches. I engaged a little bit with
  this in
  <a href="/christian/2021/08/30/critique-josh-hunt.html">Introducing Contemporary Worship Into a Traditional Church</a>.
  I think that very often the motivation is to find a form of worship in church that appeals to the culture outside
  the church. But we really don’t have to worry too much about what appeals to the outside culture. Instead we need
  to just honor God with our worship, and let the culture think whatever they want about us. If we seem backward to
  the culture but God is pleased then who cares?</p>
    </blockquote>
  </li>
</ol>]]></content><author><name></name></author><category term="christian" /><summary type="html"><![CDATA[Answers to a study guide on an essay by Matthew Barrett]]></summary></entry><entry><title type="html">The Authority and Inerrancy of Scripture</title><link href="/christian/2023/08/03/authority-and-inerrancy-of-scripture.html" rel="alternate" type="text/html" title="The Authority and Inerrancy of Scripture" /><published>2023-08-03T00:00:00-05:00</published><updated>2023-08-03T00:00:00-05:00</updated><id>/christian/2023/08/03/authority-and-inerrancy-of-scripture</id><content type="html" xml:base="/christian/2023/08/03/authority-and-inerrancy-of-scripture.html"><![CDATA[<style type="text/css">
  ol ol { list-style-type: lower-alpha; }
</style>

<p>Matthew Barrett <a href="https://www.thegospelcoalition.org/essay/authority-inerrancy-scripture/">wrote an essay on TGC</a> titled
“The Authority and Inerrancy of Scripture”.</p>

<h2 id="summary-of-the-article">Summary of the article</h2>

<p>Here is the definition and summary given by Barrett:</p>

<h3 id="definition">Definition</h3>

<blockquote>
  <p>The doctrine of the authority and inerrancy of Scripture is that, as a corollary of the inspiration of Scripture, the
  God-breathed Scriptures are wholly true in all things that they assert in the original autographs and therefore
  function with the authority of God’s own words.</p>
</blockquote>

<h3 id="summary">Summary</h3>

<blockquote>
  <p>The doctrine of the authority and inerrancy of Scripture is rooted in the doctrine of God; as God is true and
  trustworthy, so is his word recorded in the original autographs of Scriptures. This means that all things that the
  Scriptures assert are wholly true, both in the Old Testament, the Scriptures of Jesus and the apostles, and in the New
  Testament, the writings of the apostles. So far as the original autographs have been faithfully copied, translated,
  and passed down, Scripture is inerrant in its copies. This inerrancy means that all things that the Scriptures assert
  function with the authority of God’s own Word for Christians.</p>
</blockquote>

<h2 id="study-guide-answers">Study guide answers</h2>

<p>These are my answers to a study guide given by my pastor. Hopefully my answers correctly summarize the essay.</p>

<ol>
  <li>When we say Scripture is inerrant, what are we speaking about?
    <ol>
      <li>All ancient manuscripts</li>
      <li>All modern translations</li>
      <li>All the original autographs (i.e., what Moses, Paul, or other authors actually wrote)</li>
      <li>Scripture is inerrant in its message of faith
        <blockquote>
          <p>By saying that Scripture is inerrant we mean that all things <em>in the original autographs</em> are wholly true.</p>
        </blockquote>
      </li>
    </ol>
  </li>
  <li>How does the Doctrine of Inerrancy and Authority follow from our Doctrine of God? This one is for Matt since it can
be expressed in a syllogism. 😊
    <blockquote>
      <p>These syllogisms express the doctrine of the inerrancy of scripture and apply it to modern translations:</p>

      <ol>
        <li>God is true.</li>
        <li>Someone’s word reflects their own truthfulness.</li>
        <li>
          <p>Therefore God’s word is true.</p>
        </li>
        <li>God’s word is true.</li>
        <li>The original autographs were God’s word.</li>
        <li>
          <p>Therefore the original autographs were true.</p>
        </li>
        <li>Truthfulness is preserved in proportion to the faithfulness of a copy and translation.</li>
        <li>Most bibles we have today faithfully copy and translate the original autographs.</li>
        <li>
          <p>Therefore most bibles we have today are nearly as true as the original autographs.</p>
        </li>
        <li>The original autographs were true.</li>
        <li>Most bibles we have today are nearly as true as the original autographs.</li>
        <li>Therefore most bibles we have today are very true.</li>
      </ol>

      <p><br />
An identical form of argument can be constructed to do the same with regard to the authority of scripture:</p>

      <ol>
        <li>God has the highest authority.</li>
        <li>Someone’s word carries their own authority.</li>
        <li>
          <p>Therefore God’s word has the highest authority.</p>
        </li>
        <li>God’s word has the highest authority.</li>
        <li>The original autographs were God’s word.</li>
        <li>
          <p>Therefore the original autographs had the highest authority.</p>
        </li>
        <li>Authority is preserved in proportion to the faithfulness of a copy and translation.</li>
        <li>Most bibles we have today faithfully copy and translate the original autographs.</li>
        <li>
          <p>Therefore most bibles we have today are nearly as authoritative as the original autographs.</p>
        </li>
        <li>The original autographs had the highest authority.</li>
        <li>Most bibles we have today are nearly as authoritative as the original autographs.</li>
        <li>Therefore most bibles we have today are very authoritative.</li>
      </ol>
    </blockquote>
  </li>
  <li>Is the doctrine of Scripture important? Why? What does B. B. Warfield say?
    <blockquote>
      <p>B. B. Warfield said:</p>
      <blockquote>
        <p>The trustworthiness of the Scriptures lies at the foundation of trust in the Christian system of doctrine, and
    is therefore fundamental to the Christian hope and life.</p>
      </blockquote>

      <p>By that he means that our trust in the preacher of God’s word hinges on our trust of what he is preaching, and our
obligation to it hinges on the authority of the source he is expositing. In this way, faith and practice both
depend on the doctrine of scripture.</p>

      <p>There is another reason this doctrine is important. Our beliefs about scripture influence and are founded on our
beliefs about God. If we believe that the scriptures are not truthful or authoritative, then we necessarily must
believe that God is neither truthful nor authoritative. And we ought not want to ascribe false things to God.</p>
    </blockquote>
  </li>
  <li>Does the human authorship of Scripture undermine the doctrine of inerrancy? Why or why not?
    <blockquote>
      <p>While at first blush the human authorship of scripture might seem to undermine the doctrine of inerrancy, in fact
  it does not. Instead, we recognize that humans are only the <em>secondary</em> author of scripture and God is the
  <em>primary</em> author. Since God is the primary author his own personal attributes are reflected and preserved in his
  word, as the syllogisms above demonstrate.</p>

      <p>It can be helpful to think in terms of the communicability of an attribute of God. Certain attributes of God, such
  as his self-existence, cannot be transferred to other things. But certain other attributes of God, such as
  truthfulness, may indeed be transferred to other things. And human authors “carried along by the Holy Spirit”
  would not have inhibited God in this process. Instead they were part of the means and mechanism by which God
  transferred his truthfulness to scripture.</p>
    </blockquote>
  </li>
  <li>How would you describe Jesus’ view of the Scriptures? Why does this matter?
    <blockquote>
      <p>Jesus esteemed the scriptures very highly. He always treated the Old Testament with utter trust and reverence. This
  can be seen by his numerous references to and usages of it. For example:</p>
      <blockquote>
        <p>until heaven and earth pass away, not an iota, not a dot, will pass from the Law until all is
    accomplished—Matthew 5:18</p>
      </blockquote>

      <blockquote>
        <p>Scripture cannot be broken—John 10:35</p>
      </blockquote>

      <p>Jesus also made scripture the bedrock of many of his responses and much of his reasoning. Just skim through the New
Testament to see how often Jesus said “have you not read” and “it is written”. Jesus’s success against the devil’s
temptations saliently highlights how much Jesus lived by God’s word.</p>

      <p>Jesus brings a unique credibility to the question of the scriptures. In him himself God’s word has proven true, and
he himself holds God’s word in very high esteem. Therefore, inasmuch as we trust these things about Jesus, our
trust in God’s word may be bolstered.</p>
    </blockquote>
  </li>
  <li>The word “plenary” means unqualified and absolute. Barrett says, “Just as inspiration is both verbal and plenary, so
too is inerrancy.” What view does he describe that rejects plenary inspiration? How should we respond to this
approach?
    <blockquote>
      <p>Barrett describes a limited inerrancy view which rejects plenary inspiration. People who hold this view believe
  that scripture is only inerrant with regard to its message of faith. But with regard to other matters (for example
  matters that overlap with modern scientific investigation) they leave room for other authorities (for example
  modern scientific inquiry) to be a higher arbiter of truth.</p>

      <p>This limited inerrancy view undermines the doctrine of
  <a href="https://www.ligonier.org/learn/articles/understanding-sola-scriptura"><em>sola scriptura</em></a>, which states that God’s
  word is the final authority and ultimate standard for all of life.</p>

      <p>This limited view is also either self-defeating or else leads to a pitiable state. Who decides what a “matter of
  faith” is? Is the statement “Jesus rose from the dead” a matter of faith, or is it a matter of history? Those who
  hold the view of limited inerrancy are forced to say it has no overlap with and is unknowable by historical
  inquiry. Yet historical inquiry is at the very heart of true Christian thought (1 Corinthians 15). And therein lies
  the fault in the limited view. If historical inquiry trumps this matter of faith, then secular historians might
  very well conclude (rightly or wrongly—who’s to say if God’s word isn’t the judge?) that Jesus never rose
  from the dead, and so the Christian who holds this view “is of all people most to be pitied” (1 Corinthians 15:19).
  On the other hand if scripture trumps secular historical inquiry, then it is not true that scripture is inerrant
  <em>only</em> with regard to matters of faith, and the view is self-defeating.</p>

      <p>Therefore we ought to reject the limited view of inerrancy.</p>
    </blockquote>
  </li>
</ol>]]></content><author><name></name></author><category term="christian" /><summary type="html"><![CDATA[Answers to a study guide on an essay by Matthew Barrett]]></summary></entry><entry><title type="html">Scripture as Divine Revelation</title><link href="/christian/2023/08/02/scripture-as-divine-revelation.html" rel="alternate" type="text/html" title="Scripture as Divine Revelation" /><published>2023-08-02T00:00:00-05:00</published><updated>2023-08-02T00:00:00-05:00</updated><id>/christian/2023/08/02/scripture-as-divine-revelation</id><content type="html" xml:base="/christian/2023/08/02/scripture-as-divine-revelation.html"><![CDATA[<style type="text/css">
  ol ol { list-style-type: lower-alpha; }
</style>

<p>Matthew Barrett <a href="https://www.thegospelcoalition.org/essay/scripture-divine-revelation/">wrote an essay on TGC</a> titled
“Scripture as Divine Revelation”.</p>

<h2 id="summary-of-the-article">Summary of the article</h2>

<p>Here is the definition and summary given by Barrett:</p>

<h3 id="definition">Definition</h3>

<blockquote>
  <p>Scripture is the written form of God’s special revelation for his people, both the Old Testament and the New
  Testament, which provides them with an enduring, permanent witness through which the Spirit brings them into union
  with the resurrected and ascended Christ.</p>
</blockquote>

<h3 id="summary">Summary</h3>

<blockquote>
  <p>Divine revelation, which is a remarkable and gracious gift of God, comes in both general and special ways. General
  revelation is given to everyone everywhere is broad (though far from empty) in what it says about God. This kind of
  divine revelation is found in creation and in every person’s conscience. Special revelation, on the other hand, is
  specific in its content and omnipotent in its effect. Through this revelation, God communicates the mysteries of the
  faith and personal knowledge of Christ to his people. Scripture is the written form of special revelation, providing
  God’s people with an enduring witness to the work of God in Christ. This Scripture has been “breathed out” by God
  through his Spirit, carrying along the authors of Scripture as they wrote.</p>
</blockquote>

<h2 id="study-guide-answers">Study guide answers</h2>

<p>These are my answers to a study guide given by my pastor. Hopefully my answers correctly summarize the essay.</p>

<ol>
  <li>Barrett gives a definition of Scripture that includes several elements. Identify these elements by answering the
following questions:
    <ol>
      <li>What is Scripture?
        <blockquote>
          <p>Scripture is the written form of God’s special revelation.</p>
        </blockquote>
      </li>
      <li>What kind of revelation is Scripture?
        <blockquote>
          <p>It is <em>special</em> revelation, in contrast to <em>general</em> revelation.</p>
        </blockquote>
      </li>
      <li>Who is Scripture from?
        <blockquote>
          <p>Scripture is from God.</p>
        </blockquote>
      </li>
      <li>Who is Scripture for?
        <blockquote>
          <p>Scripture is for God’s people.</p>
        </blockquote>
      </li>
      <li>What is included in Scripture?
        <blockquote>
          <p>Scripture includes the Old and New Testaments. It includes God’s self-revelation. It includes the mysteries of
  the faith, and personal knowledge of Christ. It includes an enduring witness to the work of God in Christ.</p>
        </blockquote>
      </li>
      <li>Is Scripture temporary?
        <blockquote>
          <p>No, scripture is an <em>enduring</em> witness.</p>
        </blockquote>
      </li>
      <li>What does the Holy Spirit accomplish through Scripture?
        <blockquote>
          <p>The Holy Spirit accomplishes the revelation of the Christ through scripture. It is through this witness that the
  Spirit brings God’s people into union with the resurrected and ascended Christ. In other words, the Spirit makes
  Christ known to us in a saving way.</p>
        </blockquote>
      </li>
    </ol>
  </li>
  <li>What is general revelation and what are two examples of general revelation?
    <blockquote>
      <p>General revelation is revelation that is available to all and less precise in what it reveals about God. It
  includes the knowledge that God is divine in nature and very powerful.</p>
    </blockquote>
  </li>
  <li>How is special revelation different from general revelation?
    <blockquote>
      <p>Special revelation is more specific in its content. Also it is omnipotent in its effect whereas general revelation
  may be suppressed by people. General revelation is also distinct in that it is received through man’s internal
  conscience and through the created order, as opposed to special revelation which God communicated through various
  other mediums.</p>
    </blockquote>
  </li>
  <li>What are two reasons why it is extraordinary that God has spoken to us?
    <blockquote>
      <p>It is extraordinary that God has spoken to us because he is such an exalted being, higher than us brittle
  creatures, and utterly impossible to comprehend fully. And also because he is so very holy in contrast to us who
  are so very sinful. It is across these two great gulfs that God has spoken a gracious, redeeming word.</p>
    </blockquote>
  </li>
  <li>What does general revelation reveal about God? What doesn’t it reveal about God?
    <blockquote>
      <p>General revelation reveals that God is creator. It also reveals many of his divine attributes. However it does not
  reveal the Trinity or the person and work of Christ.</p>
    </blockquote>
  </li>
  <li>There are different forms of special revelation. For example, God communicated through prophets, visions, and dreams
in the Old Testament. How is Scripture different from these forms of special revelation?
    <blockquote>
      <p>Scripture is different from other mediums of special revelation in that the witness in scripture is enduring and
  permanent. Prophets died and many of their visions and dreams were not recorded in scripture and thus have been
  lost. Even Christ, who is himself the message and supreme self-revelation of God, ascended into the heavens and in
  that sense is not with us any longer. Scripture, on the other hand, is the Spirit’s enduring, ever-present gift to
  God’s people. We do not know Christ apart from the word of Christ inscripturated.</p>
    </blockquote>
  </li>
  <li>True or false. God revealed his written word progressively over time.
    <blockquote>
      <p>Yes, God revealed his written word progressively over time. In Barrett’s words, “[it] did not fall from heaven
  all at once. Rather it was revealed progressively over the course of history and through human hands.”</p>
    </blockquote>
  </li>
  <li>True or false. God revealed his word to every prophet in the same way that he revealed it to Moses on Mount Sinai.
    <blockquote>
      <p>No, not all later prophets had to ascend Sinai like Moses to bring down God’s written word.</p>
    </blockquote>
  </li>
  <li>What does “inspiration” mean?
    <blockquote>
      <p>Inspiration is key for understanding the scriptures. It does not indicate that the human authors merely recorded
  their religious experience by “inspiring” events. Instead, all scripture is <em>breathed out</em> by God, meaning they
  originated with God.</p>
    </blockquote>
  </li>
  <li>What did B. B. Warfield mean by the word “concursus”?
    <blockquote>
      <p>He intended to summarize 2 Peter 1:21 which states that men spoke from God as they were carried along by the Holy
  Spirit. By “concursus” he meant that there was a simultaneous operation between the human and the divine author,
  though the divine author is primary.</p>
    </blockquote>
  </li>
  <li>What is the greatest testimony to the inspiration of Scripture?
    <blockquote>
      <p>The greatest testimony to the inspiration and divine origin of scripture is the very common refrain in the
  scriptures that Jesus fulfills the covenant promises of God in them.</p>
    </blockquote>
  </li>
</ol>

<h2 id="personal-reflection">Personal reflection</h2>

<p>This is a helpful reminder that the first cause of scripture was not God’s people. And therefore the organization of
God’s people (“the Church”) was not the first cause. Therefore we do not need to import or appeal to any other authority
than that of God himself.</p>]]></content><author><name></name></author><category term="christian" /><summary type="html"><![CDATA[Answers to a study guide on an essay by Matthew Barrett]]></summary></entry><entry><title type="html">Friction: C# + ISP → Adapter Pattern</title><link href="/programming/2022/11/04/friction-csharp-isp-adapters.html" rel="alternate" type="text/html" title="Friction: C# + ISP → Adapter Pattern" /><published>2022-11-04T00:00:00-05:00</published><updated>2022-11-04T00:00:00-05:00</updated><id>/programming/2022/11/04/friction-csharp-isp-adapters</id><content type="html" xml:base="/programming/2022/11/04/friction-csharp-isp-adapters.html"><![CDATA[<p>I’d like to explain why you, the diligent student of Interface Segregation Principle (ISP), will find yourself making
many adapter classes in C#. I think C# adds unnecessary friction in this area.</p>

<p><strong>ISP</strong> <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">states</a>:</p>

<blockquote>
  <p>No code should be forced to depend on methods it does not use.</p>
</blockquote>

<p>The intent of the <strong>Adapter Pattern</strong> <a href="https://archive.org/details/designpatternsel00gamm/page/139">is</a>:</p>

<blockquote>
  <p>Convert the interface of a class into another interface clients expect.</p>
</blockquote>

<h2 id="a-fillasync-method">A <code class="language-plaintext highlighter-rouge">FillAsync</code> method</h2>

<p>Let’s start with a function that will asynchronously fill a buffer from a stream.</p>

<p>As you know,
<a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.stream.readasync?view=net-6.0#system-io-stream-readasync(system-memory((system-byte))-system-threading-cancellationtoken)"><code class="language-plaintext highlighter-rouge">Stream.ReadAsync</code></a>
looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">ValueTask</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">ReadAsync</span> <span class="p">(</span><span class="n">Memory</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
</code></pre></div></div>

<p>That method promises to copy some bytes from the stream into your <code class="language-plaintext highlighter-rouge">buffer</code>. But it only returns the number of bytes that
it happened to copy, which “can be less than the number of bytes allocated in the buffer if that many bytes are not
currently available”.</p>

<p>We want to completely <em>fill</em> the buffer. So here’s our method:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">ValueTask</span> <span class="nf">FillAsync</span><span class="p">(</span>
  <span class="n">Stream</span> <span class="n">stream</span><span class="p">,</span>
  <span class="n">Memory</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">,</span>
  <span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">buffer</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="kt">var</span> <span class="n">numBytes</span> <span class="p">=</span> <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">ReadAsync</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">numBytes</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"The stream ended before the buffer could be filled"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">buffer</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">[</span><span class="n">numBytes</span><span class="p">..];</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="interface-segregation-principle">Interface Segregation Principle</h2>

<p>Remember:</p>

<blockquote>
  <p>No code should be forced to depend on methods it does not use.</p>
</blockquote>

<p>Our <code class="language-plaintext highlighter-rouge">FillAsync</code> method has a “stream” parameter of type <code class="language-plaintext highlighter-rouge">Stream</code>. Which methods in the <code class="language-plaintext highlighter-rouge">Stream</code> type does <code class="language-plaintext highlighter-rouge">FillAsync</code> use? Only
<code class="language-plaintext highlighter-rouge">ReadAsync</code>:</p>

<blockquote>
  <p><code>await stream.<b><u>ReadAsync</u></b>(buffer, token)</code></p>
</blockquote>

<p>But what methods does it depend on? <strong>All of them from the Stream class</strong>. Your ISP alarm bell should be going off.</p>

<p>What’s the solution? <strong>Introduce a smaller interface</strong>.</p>

<h2 id="a-smaller-interface">A smaller interface</h2>

<p>Here’s an interface that only does precisely as much as <code class="language-plaintext highlighter-rouge">FillAsync</code> needs:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">IReadableStream</span>
<span class="p">{</span>
  <span class="n">ValueTask</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">ReadAsync</span><span class="p">(</span><span class="n">Memory</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">token</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And here’s the corresponding change to our <code class="language-plaintext highlighter-rouge">FillAsync</code> method:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> public static async ValueTask FillAsync(
<span class="gd">-  Stream stream,
</span><span class="gi">+  IReadableStream stream,
</span>   Memory&lt;byte&gt; buffer,
   CancellationToken token)
 {
   while (buffer.Length &gt; 0)
   {
     var numBytes = await stream.ReadAsync(buffer, token);
     if (numBytes &lt;= 0)
     {
       throw new Exception("The stream ended before the buffer could be filled");
     }
     buffer = buffer[numBytes..];
   }
 }
</code></pre></div></div>

<p>But now <code class="language-plaintext highlighter-rouge">FillAsync</code> can no longer accept instances of <code class="language-plaintext highlighter-rouge">Stream</code>! What’s the <em>only</em> solution? <strong>Adapter pattern</strong>.</p>

<h2 id="adapter-pattern">Adapter pattern</h2>

<p>Because we followed ISP, we now have to introduce an adapter class like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">StreamToReadableStreamAdapter</span> <span class="p">:</span> <span class="n">IReadableStream</span>
<span class="p">{</span>
  <span class="k">readonly</span> <span class="n">Stream</span> <span class="n">_stream</span><span class="p">;</span>

  <span class="k">public</span> <span class="nf">StreamToReadableStreamAdapter</span><span class="p">(</span><span class="n">Stream</span> <span class="n">stream</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">_stream</span> <span class="p">=</span> <span class="n">stream</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="n">ValueTask</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">ReadAsync</span><span class="p">(</span><span class="n">Memory</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">_stream</span><span class="p">.</span><span class="nf">ReadAsync</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And now you can use <code class="language-plaintext highlighter-rouge">FillAsync</code> on instances of <code class="language-plaintext highlighter-rouge">Stream</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MemoryStream</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">adapter</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamToReadableStreamAdapter</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">42</span><span class="p">];</span>
<span class="k">await</span> <span class="nf">FillAsync</span><span class="p">(</span><span class="n">adapter</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="the-point">The point</h2>

<p>It’s too bad that we had to introduce a new type. This is such a common thing in well-designed software. I think in this
area C# adds friction to writing high quality software.</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[As a student of Interface Segregation Principle, you'll find that C# forces you to make adapters]]></summary></entry><entry><title type="html">Marker Interfaces Are Not Evil</title><link href="/programming/2022/09/08/marker-interface-not-evil.html" rel="alternate" type="text/html" title="Marker Interfaces Are Not Evil" /><published>2022-09-08T00:00:00-05:00</published><updated>2022-09-08T00:00:00-05:00</updated><id>/programming/2022/09/08/marker-interface-not-evil</id><content type="html" xml:base="/programming/2022/09/08/marker-interface-not-evil.html"><![CDATA[<p>When I Google “marker interfaces are bad” then the article
“<a href="https://www.silasreinagel.com/blog/2018/04/24/marker-interfaces-are-evil/">Marker Interfaces Are Evil</a>”
is close to the top.</p>

<p>Well, are they?</p>

<p>I don’t think so. Let me explain why.</p>

<h2 id="marker-interfaces-reveal-intent">Marker interfaces reveal intent</h2>

<p>Imagine you have a report rendering system:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ReportRenderer</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span> <span class="n">_renderers</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">ReportRenderer</span><span class="p">(</span><span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span> <span class="n">renderers</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_renderers</span> <span class="p">=</span> <span class="n">renderers</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">IReportModel</span> <span class="n">model</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">modelType</span> <span class="p">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">GetType</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_renderers</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">modelType</span><span class="p">,</span> <span class="k">out</span> <span class="kt">var</span> <span class="n">specificRenderer</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">specificRenderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"No renderer available for models of type </span><span class="p">{</span><span class="n">modelType</span><span class="p">.</span><span class="n">Name</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">ISpecificReportRenderer</span>
<span class="p">{</span>
    <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">IReportModel</span> <span class="n">model</span><span class="p">,</span> <span class="n">ReportRenderer</span> <span class="n">generalRenderer</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">SpecificReportRenderer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ISpecificReportRenderer</span>
<span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IReportModel</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">abstract</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">T</span> <span class="n">model</span><span class="p">,</span> <span class="n">ReportRenderer</span> <span class="n">generalRenderer</span><span class="p">);</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">IReportModel</span> <span class="n">model</span><span class="p">,</span> <span class="n">ReportRenderer</span> <span class="n">generalRenderer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">model</span> <span class="k">is</span> <span class="n">not</span> <span class="n">T</span> <span class="n">asT</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Mismatched types"</span><span class="p">);</span>
        <span class="k">return</span> <span class="nf">Render</span><span class="p">(</span><span class="n">asT</span><span class="p">,</span> <span class="n">generalRenderer</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportModel</span>
<span class="p">{</span>
    <span class="c1">// Look, ma! No members!</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Report</span>
<span class="p">{</span>
    <span class="p">...</span> <span class="c1">// Pretend there's stuff in this Report class, like a tree of WPF controls or something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here’s how you might use it:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">renderers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">StringReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">DoubleReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DoubleReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">TableReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TableReportModelRenderer</span><span class="p">()</span>
<span class="p">};</span>
<span class="kt">var</span> <span class="n">renderer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ReportRenderer</span><span class="p">(</span><span class="n">renderers</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="n">TableReportModel</span>
<span class="p">{</span>
    <span class="n">Title</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Billy Bob's finances"</span><span class="p">),</span>
    <span class="n">Rows</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[][]</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Date"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Location"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Amount"</span><span class="p">)</span>
        <span class="p">},</span>
        <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"2022-09-08"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Somewhere in the world"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">DoubleReportModel</span><span class="p">(</span><span class="m">100.0</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="c1">// Now you have a rendered report!</span>
</code></pre></div></div>

<p>Of course you can always use it like this, too:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Hello, world!"</span><span class="p">));</span>
</code></pre></div></div>

<p>…or like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="nf">DoubleReportModel</span><span class="p">(</span><span class="m">42.0</span><span class="p">));</span>
</code></pre></div></div>

<p>And of course any IDE more sophisticated than Notepad will give you autocomplete
like this:</p>

<p><img src="/assets/img/marker-interface-not-evil/autocomplete.png" alt="The autocomplete menu in the Rider IDE" class="img-fluid" /></p>

<p>Do you notice how the IDE front-loaded the various report models in that list?
Want to guess how the IDE inferred your intent?</p>

<p>And look what happens when I try to generate a report from a <code class="language-plaintext highlighter-rouge">Logger</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="nf">Logger</span><span class="p">());</span>
<span class="c1">//                  ^^^^^^ [CS1503] Argument 1: cannot convert from 'Logger' to 'IReportModel'</span>
</code></pre></div></div>

<p>Want to guess how the compiler knew that it was improper to generate a report
from a <code class="language-plaintext highlighter-rouge">Logger</code>?</p>

<p>If you guessed that <strong>the marker interface revealed intent</strong> then you’re
correct!</p>

<h3 id="the-supposed-alternative">The (supposed) alternative</h3>

<p>Imagine what would happen if <code class="language-plaintext highlighter-rouge">ReportRenderer.Render()</code> accepted <code class="language-plaintext highlighter-rouge">object</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ReportRenderer</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span> <span class="n">_renderers</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">ReportRenderer</span><span class="p">(</span><span class="n">IReadOnlyDictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span> <span class="n">renderers</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_renderers</span> <span class="p">=</span> <span class="n">renderers</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="kt">object</span> <span class="n">model</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">modelType</span> <span class="p">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">GetType</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_renderers</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">modelType</span><span class="p">,</span> <span class="k">out</span> <span class="kt">var</span> <span class="n">specificRenderer</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">specificRenderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"No renderer available for models of type </span><span class="p">{</span><span class="n">modelType</span><span class="p">.</span><span class="n">Name</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">ISpecificReportRenderer</span>
<span class="p">{</span>
    <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="kt">object</span> <span class="n">model</span><span class="p">,</span> <span class="n">ReportRenderer</span> <span class="n">generalRenderer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/img/marker-interface-not-evil/where-did-they-go.png" alt="Another autocomplete menu in the Rider IDE" class="img-fluid" /></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="nf">Logger</span><span class="p">());</span>
<span class="c1">// No compile errors</span>
</code></pre></div></div>

<p>I think marker interfaces improve this situation.</p>

<h2 id="marker-interfaces-make-abstractions-possible-for-coding-evil">Marker interfaces make abstractions possible for coding evil</h2>

<p>Sometimes in C# you just have to use reflection and opaque type casting because
C#’s type system is so limited. And when you do, it’s nice to be able to have
<em>some</em> kind of abstraction available. In those situations a marker interface can
help.</p>

<p>A good example is my report generator above. Compare it to this alternative that
doesn’t require reflection or type casting:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportModel</span>
<span class="p">{</span>
    <span class="n">Report</span> <span class="nf">Render</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">StringReportModel</span> <span class="p">:</span> <span class="n">IReportModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="kt">string</span> <span class="k">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">...</span> <span class="c1">// Use your imagination</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">TableReportModel</span> <span class="p">:</span> <span class="n">IReportModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">StringReportModel</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="n">init</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">IReportModel</span><span class="p">[][]</span> <span class="n">Rows</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="n">init</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Report</span><span class="p">();</span>
        <span class="n">report</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Title</span><span class="p">.</span><span class="nf">Render</span><span class="p">());</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">row</span> <span class="k">in</span> <span class="n">Rows</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">rowReport</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Report</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">row</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">rowReport</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">cell</span><span class="p">.</span><span class="nf">Render</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="n">report</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">rowReport</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">report</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What did we have to do to attain this so-called paradise? We:</p>

<ul>
  <li>Threw out the <code class="language-plaintext highlighter-rouge">ReportRenderer</code></li>
  <li>Made each model responsible for rendering itself</li>
</ul>

<p>It’s always a good day when I get to throw out a class because that means
there’s less code to maintain.</p>

<p>But is it a good day when classes gain an extra responsibility? What will we do
when we want to render the models into CSV text instead of whatever <code class="language-plaintext highlighter-rouge">Report</code> is?
As the code above stands you’d have to rewrite all the models. I don’t think it
makes sense to change models to suit the presentation layer.</p>

<p>That should clue us into the fact that the various report models now have too
much responsibility. Here’s one way to refactor that:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportModelRenderer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">T</span> <span class="n">model</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">StringReportModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="kt">string</span> <span class="k">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">StringReportModelRenderer</span> <span class="p">:</span> <span class="n">IReportModelRenderer</span><span class="p">&lt;</span><span class="n">StringReportModel</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">StringReportModel</span> <span class="n">model</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">...</span> <span class="c1">// Use your imagination</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">TableReportModel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">StringReportModel</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="n">init</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="p">???[][]</span> <span class="n">Rows</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="n">init</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">TableReportModelRenderer</span> <span class="p">:</span> <span class="n">IReportModelRenderer</span><span class="p">&lt;</span><span class="n">TableReportModel</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">readonly</span> <span class="n">IReportModelRenderer</span><span class="p">&lt;</span><span class="n">StringReportModel</span><span class="p">&gt;</span> <span class="n">_stringRenderer</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="n">IReportModelRenderer</span><span class="p">&lt;???&gt;</span> <span class="n">_cellRenderer</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Report</span> <span class="nf">Render</span><span class="p">(</span><span class="n">TableReportModel</span> <span class="n">model</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Report</span><span class="p">();</span>
        <span class="n">report</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">_stringRenderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">Title</span><span class="p">));</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">row</span> <span class="k">in</span> <span class="n">model</span><span class="p">.</span><span class="n">Rows</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">rowReport</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Report</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">row</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">rowReport</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">_cellRenderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="n">cell</span><span class="p">));</span>
            <span class="p">}</span>
            <span class="n">report</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">rowReport</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">report</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But what type should I specify for the <code class="language-plaintext highlighter-rouge">TableReportModel.Rows</code> array? And what
type parameter do I give for <code class="language-plaintext highlighter-rouge">TableReportModelRenderer._cellRenderer</code>?</p>

<p>I only see two choices: <code class="language-plaintext highlighter-rouge">object</code>, or a marker interface. And if I pick <code class="language-plaintext highlighter-rouge">object</code>
then I lose IDE autocomplete and can also write nonsense code that tries to
generate a <code class="language-plaintext highlighter-rouge">Report</code> from a <code class="language-plaintext highlighter-rouge">Logger</code>.</p>

<p>So guess what the better answer is?</p>

<h2 id="integrations-dont-have-to-be-hard-with-marker-interfaces">Integrations don’t have to be hard with marker interfaces</h2>

<p>Let’s go back to my original report generator code toward the top:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">renderers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">StringReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">DoubleReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DoubleReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">TableReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TableReportModelRenderer</span><span class="p">()</span>
<span class="p">};</span>
<span class="kt">var</span> <span class="n">renderer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ReportRenderer</span><span class="p">(</span><span class="n">renderers</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">report</span> <span class="p">=</span> <span class="n">renderer</span><span class="p">.</span><span class="nf">Render</span><span class="p">(</span><span class="k">new</span> <span class="n">TableReportModel</span>
<span class="p">{</span>
    <span class="n">Title</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Billy Bob's finances"</span><span class="p">),</span>
    <span class="n">Rows</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[][]</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Date"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Location"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Amount"</span><span class="p">)</span>
        <span class="p">},</span>
        <span class="k">new</span> <span class="n">IReportModel</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"2022-09-08"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">StringReportModel</span><span class="p">(</span><span class="s">"Somewhere in the world"</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">DoubleReportModel</span><span class="p">(</span><span class="m">100.0</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="c1">// Now you have a rendered report!</span>
</code></pre></div></div>

<p>I don’t think it would be hard to add another report model type. All you have to
do is follow the pattern already established in the first few lines:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">renderers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">ISpecificReportRenderer</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">StringReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">DoubleReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DoubleReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">TableReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TableReportModelRenderer</span><span class="p">(),</span>
    <span class="p">[</span><span class="k">typeof</span><span class="p">(</span><span class="n">NewfangledReportModel</span><span class="p">)]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">NewfangledReportModelRenderer</span><span class="p">()</span> <span class="c1">// Look, ma! A newfangled thingamajig</span>
<span class="p">};</span>
</code></pre></div></div>

<p>There are other ways to encapsulate this pattern. You could decorate the
renderers with attributes pointing out which model types they support, then
dynamically reflect over your assembly and get the
<code class="language-plaintext highlighter-rouge">IReadOnlyDictionary&lt;Type, ISpecificReportRenderer&gt;</code> from IoC.</p>

<p>It’s easy, flexible, extensible, SOLID, etc.</p>

<h2 id="marker-interfaces-arent-intended-for-type-system-safety">Marker interfaces aren’t intended for type-system safety</h2>

<p>The author of the article rightly
<a href="https://www.silasreinagel.com/blog/2018/04/24/marker-interfaces-are-evil/#:~:text=Since%20a%20marker%20interface%20is%20a%20contract%20who%20requires%20no%20behavior%2C%20he%20can%20never%20provide%20type%2Dsafety">points out</a>
that</p>

<blockquote>
  <p>Since a marker interface is a contract [that] requires no behavior, [it] can
  never provide type-safety.</p>
</blockquote>

<p>In response I say: then don’t use marker interfaces for type safety. Instead,
use them to categorize types and reveal intent.</p>

<h2 id="marker-interfaces-are-not-evil">Marker interfaces are not evil</h2>

<ul>
  <li>They enhance the understandability and maintainability of your code</li>
  <li>They are useful when you have to hide the real behaviors of your system</li>
  <li>They are useful when C#’s type system forces you into unpleasant things like reflection and casting</li>
  <li>They can be easy to extend correctly</li>
</ul>

<p>Use them! Use libraries that use them!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[At least, not necessarily]]></summary></entry><entry><title type="html">The Vanity of Modern Cosmology</title><link href="/misc/2022/08/30/vanity-modern-cosmology.html" rel="alternate" type="text/html" title="The Vanity of Modern Cosmology" /><published>2022-08-30T00:00:00-05:00</published><updated>2022-08-30T00:00:00-05:00</updated><id>/misc/2022/08/30/vanity-modern-cosmology</id><content type="html" xml:base="/misc/2022/08/30/vanity-modern-cosmology.html"><![CDATA[<p><a href="https://www.google.com/search?q=cosmology+definition">Google says</a> that
“cosmology” is:</p>

<blockquote>
  <p><em>noun</em></p>

  <p>the science of the origin and development of the universe. Modern astronomy is
  dominated by the Big Bang theory, which brings together observational
  astronomy and particle physics.</p>
  <ul>
    <li>an account or theory of the origin of the universe.</li>
  </ul>
</blockquote>

<p>Wikipedia has an article titled
“<a href="https://en.wikipedia.org/wiki/Timeline_of_the_far_future">Timeline of the far future</a>”.
The article spans an unfathomable stretch of time from the near present all the
way out to \(10^{10^{10^{56}}}\) years in the future. As of this writing it
cites 209 references from a broad range of sources, including many who are
highly regarded by the scientific community. In its own words:</p>

<blockquote>
  <p>While the future cannot be predicted with certainty, present understanding in
  various scientific fields allows for the prediction of some far-future events,
  if only in the broadest outline. These fields include astrophysics, which
  studies how planets and stars form, interact, and die; particle physics, which
  has revealed how matter behaves at the smallest scales; evolutionary biology,
  which predicts how life will evolve over time; plate tectonics, which shows
  how continents shift over millennia; and sociology, which examines how human
  societies and cultures evolve.</p>
</blockquote>

<p>The article draws on a wide range of people from a wide range of fields.</p>

<p>I don’t think it’s a stretch to say that article presents a sketch of modern
cosmology.</p>

<h2 id="the-future-and-its-impact">The future and its impact</h2>

<p>What does the future hold?</p>

<p>You probably have a good idea of how tomorrow is going to pan out. For most
people it’ll be very unsurprising. You’ll wake up, eat breakfast, go to work,
and so on. Tomorrow you’ll eat lunch because you won’t want to be hungry before
suppertime rolls around.</p>

<p>Later this week or perhaps later this month you’ll have a bill to pay. If you
don’t pay that bill then you’ll be sent to collections. And so you’ll go to
work and will earn your paycheck. And you have other things that you’ll want to
do in the future, so you make plans to spend your paycheck on those things too.</p>

<p>You probably do a great many things because <em>you foresee something in the
future</em>. In a word, future events drive, control, motivate, and govern your
actions now.</p>

<h2 id="the-oughtness-of-the-future">The oughtness of the future</h2>

<p>What ought you do today? It depends a lot on what the future will bring.</p>

<p>Is it going to rain this afternoon? Then you ought to bring an umbrella with you
when you go out.</p>

<p>How many market cycles have you lived through and afterward thought “I
ought to have distributed my investments in a different manner”?</p>

<p>Are you working hard on a large project now because you believe it will be
important in the future? In that case you attribute value to your present work
because you anticipate that the outcome of your work will be valuable in the
future.</p>

<h2 id="the-future-of-modern-cosmology">The future of modern cosmology</h2>

<p>These are the most distant events anticipated by the Wikipedia article I linked
to above:</p>

<table>
  <thead>
    <tr>
      <th>Years in the future</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\(10^{10^{76}}\)</td>
      <td>Beyond this point, it is almost certain that the universe will be an almost pure vacuum, with all baryonic matter having decayed into subatomic particles, until it reaches its final energy state, assuming it does not happen before this time.</td>
    </tr>
    <tr>
      <td>\(10^{10^{120}}\)</td>
      <td>Highest estimate for the time it takes for the universe to reach its final energy state.</td>
    </tr>
    <tr>
      <td>\(10^{10^{10^{56}}}\)</td>
      <td>Around this vast timeframe, quantum tunnelling in any isolated patch of the universe could generate new inflationary events, resulting in new Big Bangs giving birth to new universes.</td>
    </tr>
  </tbody>
</table>

<p>To put it crassly, modern cosmology says everything is going to fizzle away into
nothing.</p>

<p>And then it’ll start over again. These “new inflationary events” aren’t one-off
events; it’s cyclical.</p>

<h2 id="vanity-of-vanities">Vanity of vanities</h2>

<p>Have you ever read Ecclesiastes? Here’s how
<a href="https://www.esv.org/Ecclesiastes+1/">chapter one</a> starts:</p>

<blockquote>
  <p>Vanity of vanities, says the Preacher,<br />
	  vanity of vanities! All is vanity.<br />
	What does man gain by all the toil<br />
	  at which he toils under the sun?<br />
	A generation goes, and a generation comes,<br />
  but the earth remains forever.<br />
	The sun rises, and the sun goes down,<br />
	  and hastens to the place where it rises.<br />
	The wind blows to the south<br />
	  and goes around to the north;<br />
	around and around goes the wind,<br />
	  and on its circuits the wind returns.<br />
	All streams run to the sea,<br />
	  but the sea is not full;<br />
	to the place where the streams flow,<br />
	  there they flow again.<br />
	All things are full of weariness;<br />
	  a man cannot utter it;<br />
	the eye is not satisfied with seeing,<br />
	  nor the ear filled with hearing.<br />
	What has been is what will be,<br />
	  and what has been done is what will be done,<br />
	  and there is nothing new under the sun.<br />
	Is there a thing of which it is said,<br />
	  “See, this is new”?<br />
	It has been already<br />
	  in the ages before us.<br />
	There is no remembrance of former things,<br />
	  nor will there be any remembrance<br />
	of later things yet to be<br />
	  among those who come after.<br /></p>
</blockquote>

<p>Ecclesiastes is basically an apologetic against the worldviews that were
competing against ancient Hebrew thought at that time. Those worldviews thought
that history was cyclical, and Solomon’s book makes it very clear how pointless
such a history would be. On the other hand, history in the eyes of the Hebrew
Bible is linear with a definite beginning and certain goal.</p>

<p>Modern cosmology falls squarely in the sights of Ecclesiastes.</p>

<h2 id="the-vanity-of-modern-cosmology">The vanity of modern cosmology</h2>

<p>Not only are you supposed to believe that nobody will ever remember or care
about anything you do. You’re also supposed to believe that the same thing is
going to happen to someone else somewhere else. Over and over again forever.</p>

<p>Why should you go to work tomorrow? According to modern cosmology your work is
going to fizzle away and be forgotten. And then eventually someone else
somewhere else is going to do whatever you are going to do tomorrow, whether you
do it or not. So why not just stay home?</p>

<p>On the one hand you can get away with whatever you want because nobody is
watching, or if they are their opinion doesn’t really matter in the grand scheme
of things because they’re destined to be just a fizzled out nothing.</p>

<p>But on the other hand there is no glory in anything you do, because you also are
destined to be just a fizzled out nothing.</p>

<p>To put it simply, there is no “oughtness” to modern cosmology.</p>

<h2 id="the-weight-and-consequence-of-biblical-cosmology">The weight and consequence of Biblical cosmology</h2>

<p>In sharp contrast, the Bible is very clear that history has a date of
manufacture. That was a few thousand years ago when God started saying things.</p>

<p>And it is also clear that history is on a very intentional trajectory leading
through a series of intentional events planned and executed by a sovereign and
wise God.</p>

<p>For example, the Day of Judgment is coming when “the heavens will pass away with
a roar, and the heavenly bodies will be burned up and dissolved, and the earth
and the works that are done on it will be exposed” (2 Peter 3:10).</p>

<p>There is a God who made you. Therefore you are accountable to him. Furthermore
he has fixed a Day of Judgment and has gone to great lengths to make two things
clear: you are a sinner who is not able to make it through that Day; and there
is a savior who is able to bring you through unscathed.</p>

<p>Not only <em>ought</em> you to go to work (because God said so in 2 Thessalonians
3:6–12)—it’s possible for your work tomorrow to be eternally
significant (because God will reward whatever service is rendered to
him—Ephesians 6:7–8).</p>]]></content><author><name></name></author><category term="misc" /><summary type="html"><![CDATA[The future of things, and the point thereof]]></summary></entry><entry><title type="html">ReentrantAsyncLock NuGet Package</title><link href="/programming/2022/06/20/introducing-reentrantasynclock.html" rel="alternate" type="text/html" title="ReentrantAsyncLock NuGet Package" /><published>2022-06-20T00:00:00-05:00</published><updated>2022-06-20T00:00:00-05:00</updated><id>/programming/2022/06/20/introducing-reentrantasynclock</id><content type="html" xml:base="/programming/2022/06/20/introducing-reentrantasynclock.html"><![CDATA[<p>In the previous two posts I outlined the concept for a reentrant asynchronous
lock, and explained how it can provide all three of these things at once:</p>

<ul>
  <li>Reentrance</li>
  <li>Asynchronicity</li>
  <li>Mutual exclusion</li>
</ul>

<p>In this third post I’ll introduce the ReentrantAsyncLock NuGet package which
gives you semantics that will look a little more normal. I think this third post
should take the place in your mind of the second one because the code here works
out some kinks that I inadvertently have there. I consider this NuGet package
the capstone of my efforts in this series.</p>

<p>NuGet package:<br />
<a href="https://www.nuget.org/packages/ReentrantAsyncLock">https://www.nuget.org/packages/ReentrantAsyncLock</a></p>

<p>Source code:<br />
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock">https://github.com/matthew-a-thomas/cs-reentrant-async-lock</a></p>

<h1 id="the-nuget-package-and-its-semantics">The NuGet package and its semantics</h1>

<p>The
<a href="https://www.nuget.org/packages/ReentrantAsyncLock">ReentrantAsyncLock NuGet package</a>
lets you write code like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">asyncLock</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ReentrantAsyncLock</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">raceCondition</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="c1">// You can acquire the lock asynchronously</span>
<span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">))</span>
<span class="p">{</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">WhenAll</span><span class="p">(</span>
        <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="c1">// The lock is reentrant</span>
            <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">// The lock provides mutual exclusion</span>
                <span class="n">raceCondition</span><span class="p">++;</span>
            <span class="p">}</span>
        <span class="p">}),</span>
        <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">raceCondition</span><span class="p">++;</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="n">Assert</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">raceCondition</span><span class="p">);</span>
</code></pre></div></div>

<p>In the code comments above I point out the three different aspects of the lock.</p>

<p>You’ll also notice that the NuGet package source code has automated tests that
assert the correctness of each of the three aspects (and more).</p>

<h1 id="how-does-it-work">How does it work?</h1>

<p>It combines <code class="language-plaintext highlighter-rouge">ExecutionContext</code>/<code class="language-plaintext highlighter-rouge">AsyncLocal</code> with a special
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code> and a special awaitable type.</p>

<h2 id="executioncontext-and-asynclocal">ExecutionContext and AsyncLocal</h2>

<p>If you’re familiar with
<a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.executioncontext?view=net-6.0">the ExecutionContext class</a>
then you’ll know that it “flows” downward through async calls. And it carries
some stuff with it. In particular, it carries the values of
<a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-6.0">AsyncLocal</a>
instances.</p>

<p>One such instance holds a value that indicates an asynchronous scope. When you
acquire the lock then your scope is squirreled away as though to say “the lock
belongs to this scope”. And then that scope flows downward through async calls.
That’s what makes the lock reentrant.</p>

<p>If you’re looking at the source code then check out
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/blob/deded4441ad895428dc3716852e5fb07c74036af/ReentrantAsyncLock/ReentrantAsyncLock.cs#L84">the <code class="language-plaintext highlighter-rouge">ReentrantAsyncLock.LocalScope</code> property</a>.
It is backed by an <code class="language-plaintext highlighter-rouge">AsyncLocal</code> instance and stores a value that indicates an
asynchronous scope. When an object is assigned to this property then all nested
async calls also get that value.</p>

<p>Now notice
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/blob/deded4441ad895428dc3716852e5fb07c74036af/ReentrantAsyncLock/ReentrantAsyncLock.cs#L149">the <code class="language-plaintext highlighter-rouge">ReentrantAsyncLock.TryLockImmediately</code> method</a>.
That method checks the <code class="language-plaintext highlighter-rouge">LocalScope</code> against
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/blob/deded4441ad895428dc3716852e5fb07c74036af/ReentrantAsyncLock/ReentrantAsyncLock.cs#L63">the <code class="language-plaintext highlighter-rouge">_owningScope</code> field</a>.
When they match then the lock can be acquired because that’s a case of
reentrance.</p>

<h2 id="synchronizationcontext">SynchronizationContext</h2>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.synchronizationcontext?view=net-6.0">The <code class="language-plaintext highlighter-rouge">SynchronizationContext</code> class</a>
is Microsoft’s abstraction of a synchronization model. It is (usually) the thing
in charge of deciding how asynchronous continuations should be executed.</p>

<p>For example, in WPF when you are executing asynchronous code on the UI thread
then you’ll want to still be on the UI thread after an <code class="language-plaintext highlighter-rouge">await</code> call:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">partial</span> <span class="k">class</span> <span class="nc">MyUserControl</span>
<span class="p">{</span>
  <span class="cm">/* Notice this is an "async" method: */</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">OnButtonClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">5</span><span class="p">));</span>
    <span class="nf">DoSomethingSynchronousOnTheUIThread</span><span class="p">();</span> <span class="c1">// &lt;-- This needs to happen on the UI thread</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>WPF has
<a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatchersynchronizationcontext?view=windowsdesktop-6.0">a special subclass of <code class="language-plaintext highlighter-rouge">SynchronizationContext</code></a>
that enables this.</p>

<p>I do something similar in the <code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code> package. I subclassed
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code> so that I could serialize continuations and execute
them one-at-a-time.</p>

<p>Check out
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/blob/deded4441ad895428dc3716852e5fb07c74036af/ReentrantAsyncLock/WorkQueue.cs">my <code class="language-plaintext highlighter-rouge">WorkQueue</code> class</a>.
It’s the same thing that I described in
<a href="/programming/2022/06/14/reentrant-async-lock.html">the first post</a>.</p>

<p>It’s just a simple work queue. But that’s what gives the lock mutual exclusion.</p>

<p>Recall how you acquire the lock:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</code></pre></div></div>

<p>When you invoke <code class="language-plaintext highlighter-rouge">LockAsync</code> then you are immediately placed on that
SynchronizationContext. The compiler packages up the code after the <code class="language-plaintext highlighter-rouge">await</code> into
a continuation, and that continuation is given to the work queue. And since that
work queue will only do one thing at a time you get mutual exclusion.</p>

<h2 id="a-special-awaitable-type">A special awaitable type</h2>

<p>This brings us to
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/blob/deded4441ad895428dc3716852e5fb07c74036af/ReentrantAsyncLock/AsyncLockResult.cs">the <code class="language-plaintext highlighter-rouge">AsyncLockResult</code> class</a>.
This is a special awaitable type and is the thing that lets you asynchronously
get the lock. Microsoft
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#11882-awaitable-expressions">describes</a>
how to make an “awaitable” thing. <code class="language-plaintext highlighter-rouge">AsyncLockResult</code> follows those rules and so
you’re allowed to “await” the thing returned from the <code class="language-plaintext highlighter-rouge">LockAsync</code> method.</p>

<p><code class="language-plaintext highlighter-rouge">AsyncLockResult</code> is really the glue that holds everything together. There are a
couple of competing things going on and this class helps resolve them.</p>

<p>For example, I need to execute asynchronous continuations on a special
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code>, but it’s futile to change the current
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code> within asynchronous code because the previous context
is restored as soon as execution leaves that context. So how do you change the
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code> in the asynchronous code <em>outside of</em> the <code class="language-plaintext highlighter-rouge">LockAsync</code>
method? The answer is to make the <code class="language-plaintext highlighter-rouge">LockAsync</code> method actually be <em>synchronous</em>
but return something that can be awaited—that something is an instance of
<code class="language-plaintext highlighter-rouge">AsyncLockResult</code>.</p>

<p>As another example, the <code class="language-plaintext highlighter-rouge">LockAsync</code> method takes a <code class="language-plaintext highlighter-rouge">CancellationToken</code>, meaning
“please stop trying to acquire the lock as soon as this token is canceled.” But
what if the continuation (for the code following your call to <code class="language-plaintext highlighter-rouge">LockAsync</code>) has
already been posted to the work queue and the work queue is busy? Then you’ll
cancel the <code class="language-plaintext highlighter-rouge">CancellationToken</code> and nothing will happen until the work queue gets
around to processing your continuation. So how do you safely post a continuation
(which by design is only allowed to be executed once) to the work queue <em>and</em>
call it when the <code class="language-plaintext highlighter-rouge">CancellationToken</code> is canceled? Again, the answer is “with the
<code class="language-plaintext highlighter-rouge">AsyncLockResult</code> class.” It wraps the continuation in such a way that it can be
sent to both places at once but will only get executed a single time.</p>

<h1 id="the-point">The point</h1>

<p>The
<a href="https://www.nuget.org/packages/ReentrantAsyncLock">ReentrantAsyncLock NuGet package</a>
is an asynchronous lock that gives you all three of these things with nice
semantics:</p>

<ul>
  <li>Reentrance</li>
  <li>Asynchronicity</li>
  <li>Mutual exclusion</li>
</ul>

<p>Give it a try!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Introducing the ReentrantAsyncLock package]]></summary></entry><entry><title type="html">Questions Answered</title><link href="/programming/2022/06/20/questions-answered.html" rel="alternate" type="text/html" title="Questions Answered" /><published>2022-06-20T00:00:00-05:00</published><updated>2022-06-20T00:00:00-05:00</updated><id>/programming/2022/06/20/questions-answered</id><content type="html" xml:base="/programming/2022/06/20/questions-answered.html"><![CDATA[<p>This series started because I needed a reentrant asynchronous lock for my job.
We were already using an asynchronous lock but I noticed it deadlocked when you
tried to reenter it. I thought that was silly so I set out to find one that
works. That’s when I found Max Fedotov’s article titled
“Reentrant (Recursive) Async Lock is Impossible in C#”, along with
<a href="https://www.reddit.com/r/dotnet/comments/rklmby/reentrant_recursive_async_lock_is_impossible_in_c/">his Reddit thread</a>
about the same.</p>

<p>I took that as a challenge and set out to prove him wrong. It’s not personal, I
just like a good programming challenge. And it happens that the solution to this
one will satisfy a real world need in my job.</p>

<p>So after publishing
“<a href="/programming/2022/06/14/reentrant-async-lock.html">Reentrant Async Lock</a>” I
linked to it
<a href="https://www.reddit.com/r/dotnet/comments/rklmby/comment/icdr70a/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">in Max’s Reddit thread</a>.</p>

<p>He gave it some thought and then replied with
<a href="https://itnext.io/reentrant-recursive-async-lock-is-impossible-in-c-e9593f4aa38a#:~:text=article%20still%20stands.-,2,-Another%20challenge%20to">an update to his article</a>
and
<a href="https://www.reddit.com/r/dotnet/comments/rklmby/comment/icthvsy/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">a reply on Reddit</a>.</p>

<p>I really appreciate his thoughtful replies—something too often absent from
other people on the internet—and I’d like to address the concerns he
raised. I’ll frame them as questions and then I’ll answer them.</p>

<p>In summary, I think that
<a href="https://www.nuget.org/packages/ReentrantAsyncLock">the ReentrantAsyncLock NuGet package</a>
correctly satisfies the need for a reentrant async lock. And while Max’s
concerns do require consideration I don’t think they are showstoppers.</p>

<h1 id="is-configureawaitfalse-a-problem">Is ConfigureAwait(false) a problem?</h1>

<p>When you await a <code class="language-plaintext highlighter-rouge">Task</code> in C#, you can configure it to take the code after the
await and run it on the thread pool synchronization context instead of returning
to whatever context you were on to begin with.</p>

<p>This can be very handy. And as Max pointed out this is sometimes even
recommended. He points to
<a href="https://devblogs.microsoft.com/dotnet/configureawait-faq/">an article written by Stephen Toub</a>
and to
<a href="https://blog.stephencleary.com/2012/02/async-and-await.html#avoiding-context">an article written by Stephen Cleary</a>.
If you’ve been around C# long enough then you’ll recognize both of those names
as heavy hitters. Both Stephens have made significant contributions to the .Net
world and when they say something a lot of people listen. So let’s consider what
they say.</p>

<p>First let me give an example of when <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code> is a good thing.</p>

<p>Pretend that you have written the following library for the world to use. It’s
really useful so a lot of people use your special function. A lot of CPU time
the world over is being spent on your asynchronous function, but burning
dinosaurs isn’t your hobby so you’d like to save some electricity and make it
faster:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyLibrary</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSpecialStuffAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="nf">DoFirstThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">DoSecondThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">DoLastThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>One way you can do that is by using <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyLibrary</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSpecialStuffAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="nf">DoFirstThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">DoSecondThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="k">await</span> <span class="nf">DoLastThingAsync</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But <em>should</em> you do that?</p>

<p>Well, it depends on what you’re doing. There is no hard-and-fast rule, but it’s
merely a performance optimization that you can use <em>if it makes sense</em>:</p>

<table>
  <thead>
    <tr>
      <th>What you’re doing</th>
      <th>Use <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code>?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Writing application code</td>
      <td>No (Toub)</td>
    </tr>
    <tr>
      <td>Writing framework code</td>
      <td>Sometimes (Toub, Cleary)</td>
    </tr>
    <tr>
      <td>Something that needs to preserve context</td>
      <td>No (Toub, Cleary)</td>
    </tr>
    <tr>
      <td>Eeking out every last CPU cycle</td>
      <td>Maybe (Toub, Cleary)</td>
    </tr>
    <tr>
      <td>Trying to avoid deadlocks</td>
      <td>Maybe (Toub)</td>
    </tr>
  </tbody>
</table>

<p>As an aside, if you’re trying to avoid deadlocks by using
<code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code> then you’re probably doing it wrong. Why are you
synchronously blocking on a <code class="language-plaintext highlighter-rouge">Task</code> at all?</p>

<p>But here’s the thing: both Stephens agree if you need to preserve the context
then you should not use <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code>. And in the case of
<code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code> that context is the very thing that makes it tick—you
must preserve it, so don’t use <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code>.</p>

<p>Here’s an example of how <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code> can mess up a
<code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoStuffAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span>
    <span class="k">await</span> <span class="nf">DoAsyncIOOperationAsync</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="c1">//                                  ^^^^^^^^^^^^^^^^^^^^^^</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span> <span class="c1">// &lt;-- Uh oh!! Caused by this ^</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That second call to <code class="language-plaintext highlighter-rouge">DoNonThreadSafeStuff()</code> will <strong>not</strong> be guarded by the lock
because you escaped the special synchronization context that the lock uses to
guarantee mutual exclusion.</p>

<p>So when you’re inside the guarded section of a <code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code> I think both
Stephens would say “don’t use <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code>.”</p>

<p>Important!—it doesn’t matter if <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code> is used by
asynchronous methods that you call. Because when execution resumes after those
methods it’ll resume back on the special synchronization context. For example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoStuffAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">await</span> <span class="nf">DoAsyncIOOperationAsync</span><span class="p">(</span><span class="n">token</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">));</span>
    <span class="c1">//                                                             ^^^^^^^^^^^^^^^^^^^^^^</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span> <span class="c1">// &lt;-- This call is still guarded, even with this ^</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So you really only have to worry about the asynchronous code immediately within
the guarded section of the async lock. And if you’re using the async lock then
that means you are also writing the code in that guarded section—nobody is
talking about some third party function “out there” that you can’t control. So
just don’t use <code class="language-plaintext highlighter-rouge">ConfigureAwait(false)</code> in the immediate guarded section and
you’ll be fine.</p>

<h1 id="can-you-synchronously-block-and-wait-for-other-tasks-in-the-same-synchronization-context">Can you synchronously block and wait for other tasks in the same synchronization context?</h1>

<p>I think the question is if you can do this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomething1Async</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="nf">DoSomething2Async</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="n">task</span><span class="p">.</span><span class="nf">Wait</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomething2Async</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="nf">DoSomething1Async</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="n">task</span><span class="p">.</span><span class="nf">Wait</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The answer is no. That will deadlock.</p>

<p>But this isn’t an issue with the async lock. The problem is you’ve written
terrible code that deadlocks. The potential for deadlocks is the reason it’s a
code smell to <code class="language-plaintext highlighter-rouge">.Wait()</code> a <code class="language-plaintext highlighter-rouge">Task</code>.</p>

<p>Note: this deadlocks, too:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomething1Async</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="nf">DoSomething2Async</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">task</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomething2Async</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="nf">DoSomething1Async</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">task</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To be fair, Max also doesn’t think this is really an issue.</p>

<p><strong>Update</strong>: Actually you’ll get stack overflows from those examples. But pretend
for a moment that it deadlocks from the fact that one is waiting on the other
which is waiting on the first. Pretend we’re talking about this instead:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DeadlockAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">tcs</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TaskCompletionSource</span><span class="p">();</span>
  <span class="kt">var</span> <span class="n">task1</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">await</span> <span class="n">tcs</span><span class="p">.</span><span class="n">Task</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="kt">var</span> <span class="n">task2</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="n">tcs</span><span class="p">.</span><span class="nf">TrySetResult</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="k">await</span> <span class="n">task2</span><span class="p">;</span>
  <span class="k">await</span> <span class="n">task1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example there is a race condition between <code class="language-plaintext highlighter-rouge">task1</code> and <code class="language-plaintext highlighter-rouge">task2</code>. If
<code class="language-plaintext highlighter-rouge">task2</code> wins the race then everything is hunky dory. But if <code class="language-plaintext highlighter-rouge">task1</code> wins the
race then there is a deadlock: <code class="language-plaintext highlighter-rouge">task1</code> will be waiting on the <code class="language-plaintext highlighter-rouge">tcs</code> which
can only be set by <code class="language-plaintext highlighter-rouge">task2</code>, but <code class="language-plaintext highlighter-rouge">task2</code> is waiting to acquire the lock and can’t
until <code class="language-plaintext highlighter-rouge">task1</code> releases it.</p>

<p>Let me go into a little more detail about <em>why</em> that would deadlock, and why I
think that’s exactly what should happen.</p>

<p>The reason it deadlocks is because it’s not an example of re-entering the lock.
Two <strong>different</strong> contexts are vying for the lock. Sometimes one of them gets it
and sometimes the other one gets it, but not both at the same time.</p>

<p>And they are two different contexts because they’ll have <em>sibling</em>
<code class="language-plaintext highlighter-rouge">ExecutionContext</code> instead of one “inheriting” from the other.</p>

<p>I think deadlocking is the right thing. Think about the synchronous analogy:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="kt">object</span> <span class="n">_gate</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">void</span> <span class="nf">Deadlock</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">mre</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ManualResetEventSlim</span><span class="p">();</span>
  <span class="kt">var</span> <span class="n">thread1</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="p">(()</span> <span class="p">=&gt;</span>
  <span class="p">{</span>
    <span class="k">lock</span> <span class="p">(</span><span class="n">_gate</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">mre</span><span class="p">.</span><span class="nf">Wait</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="n">thread1</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
  <span class="kt">var</span> <span class="n">thread2</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="p">(()</span> <span class="p">=&gt;</span>
  <span class="p">{</span>
    <span class="k">lock</span> <span class="p">(</span><span class="n">_gate</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">mre</span><span class="p">.</span><span class="nf">Set</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="n">thread2</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

  <span class="n">thread2</span><span class="p">.</span><span class="nf">Join</span><span class="p">();</span>
  <span class="n">thread1</span><span class="p">.</span><span class="nf">Join</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I don’t think anyone will complain about the deadlock in the synchronous
analogy. Instead I think they’ll be content to learn that the problem is their
code :)</p>

<h1 id="cant-someone-just-replace-synchronizationcontextcurrent-somewhere-down-the-call-chain-inside-the-guarded-section-of-an-async-lock">Can’t someone just replace SynchronizationContext.Current somewhere down the call chain inside the guarded section of an async lock?</h1>

<p>I think the question here is if this has any effect on the performance of the
lock:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomethingAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">ChangeSynchronizationContext</span><span class="p">());</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">ChangeSynchronizationContext</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">SynchronizationContext</span><span class="p">.</span><span class="nf">SetSynchronizationContext</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The answer is: no. When execution returns from the awaited <code class="language-plaintext highlighter-rouge">Task</code> then the
async state machine will have restored the synchronization context to what it
was before awaiting that <code class="language-plaintext highlighter-rouge">Task</code>. So in this case <code class="language-plaintext highlighter-rouge">DoNonThreadSafeStuff()</code> will
still be guarded by the lock.</p>

<p>But perhaps that’s not what Max was getting at. Perhaps he meant this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomethingAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="nf">ChangeSynchronizationContext</span><span class="p">();</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Yield</span><span class="p">();</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">ChangeSynchronizationContext</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">SynchronizationContext</span><span class="p">.</span><span class="nf">SetSynchronizationContext</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The answer here is: yes, that’ll cause <code class="language-plaintext highlighter-rouge">DoNonThreadSafeStuff()</code> to execute on
the thread pool. You’ll have broken the lock.</p>

<p>So don’t do that :)</p>

<p>If you’re concerned about calling third party synchronous functions within the
guarded section of the async lock then you can always package them up into a
<code class="language-plaintext highlighter-rouge">Task.Run</code> and you will never have issues. Like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DoSomethingAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">token</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">ExecuteStrangeThirdPartyFunction</span><span class="p">());</span>
    <span class="nf">DoNonThreadSafeStuff</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="what-about-the-synchronization-context-from-which-you-enter-the-async-lock">What about the synchronization context from which you enter the async lock?</h1>

<p>Max said:</p>

<blockquote>
  <p>There could be another <code class="language-plaintext highlighter-rouge">SynchronizationContext</code> already when you apply your
  lock, so you have to consider if you want to wrap it and post things onto it
  instead of posting them to the thread pool.</p>
</blockquote>

<p>This is a valid concern. Let me illustrate with a pretend WPF example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="c1">// Event handler for the "Click" event on a button named "Button"</span>
<span class="k">public</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">OnButtonClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Button</span><span class="p">.</span><span class="n">Tag</span> <span class="p">=</span> <span class="s">"This works"</span><span class="p">;</span> <span class="c1">// This will work</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="k">default</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="n">Button</span><span class="p">.</span><span class="n">Tag</span> <span class="p">=</span> <span class="s">"Uh oh!"</span><span class="p">;</span> <span class="c1">// This will throw an exception</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The above code illustrates that when a button’s “Click” event handler executes
it’ll do so on the UI thread. But then execution leaves that thread inside the
async lock. This change in threads might be unexpected to developers. The second
assignment to <code class="language-plaintext highlighter-rouge">Button.Tag</code> will throw an exception because in WPF that property
can only be assigned from the thread that is running that button’s dispatcher.</p>

<p>What’s the solution?</p>

<p>In this case you would have to do the following:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">ReentrantAsyncLock</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">public</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">OnButtonClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Button</span><span class="p">.</span><span class="n">Tag</span> <span class="p">=</span> <span class="s">"This still works"</span><span class="p">;</span>
  <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="k">default</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">await</span> <span class="n">Button</span><span class="p">.</span><span class="n">Dispatcher</span><span class="p">.</span><span class="nf">InvokeAsync</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Button</span><span class="p">.</span><span class="n">Tag</span> <span class="p">=</span> <span class="s">"Now this works, too!"</span><span class="p">);</span> <span class="c1">// No more exception</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While it is not a showstopper, it is something you have to be conscious of. And
I think that’s Max’s point; entering the async lock changes some things that
don’t usually change.</p>

<h1 id="should-the-async-lock-have-a-synchronous-locking-api-too">Should the async lock have a synchronous locking API, too?</h1>

<p>Max points out that many async lock implementations also have synchronous lock
methods. Then the async lock can be used in both synchronous and asynchronous
contexts.</p>

<p>Personally I don’t think that’s a good choice. In fact I would go so far as to
call it an anti-pattern. I personally think that a synchronous lock should be
used for synchronous contexts, and an asynchronous lock should be used for
asynchronous contexts. I suspect that if you want to use one for the other then
there are probably some things going amuck in your code. I think that if you’re
okay with
<a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">colored functions</a>
then you should also be okay with colored locks.</p>

<p>But I’m writing this in a country where the First Amendment gives citizens the
right to freely express the following extension method, and where copyright law
won’t hamper them because this whole site
<a href="https://github.com/matthew-a-thomas/me/blob/master/LICENSE">is MIT-licensed</a>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ReentrantAsyncLockExtensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">IDisposable</span> <span class="nf">LockSynchronously</span><span class="p">(</span><span class="k">this</span> <span class="n">ReentrantAsyncLock</span> <span class="n">asyncLock</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">mre</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ManualResetEventSlim</span><span class="p">();</span>
        <span class="kt">var</span> <span class="n">lockResult</span> <span class="p">=</span> <span class="n">asyncLock</span><span class="p">.</span><span class="nf">LockAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">awaiter</span> <span class="p">=</span> <span class="n">lockResult</span><span class="p">.</span><span class="nf">GetAwaiter</span><span class="p">();</span>
        <span class="n">awaiter</span><span class="p">.</span><span class="nf">OnCompleted</span><span class="p">(</span><span class="n">mre</span><span class="p">.</span><span class="n">Set</span><span class="p">);</span>
        <span class="n">mre</span><span class="p">.</span><span class="nf">Wait</span><span class="p">(</span><span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">);</span> <span class="c1">// Token has already been given to LockAsync(...) above</span>
        <span class="kt">var</span> <span class="n">asyncDisposable</span> <span class="p">=</span> <span class="n">awaiter</span><span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Disposable</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">_</span> <span class="p">=</span> <span class="n">asyncDisposable</span><span class="p">.</span><span class="nf">DisposeAsync</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">sealed</span> <span class="k">class</span> <span class="nc">Disposable</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="n">Action</span><span class="p">?</span> <span class="n">_dispose</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">Disposable</span><span class="p">(</span><span class="n">Action</span><span class="p">?</span> <span class="n">dispose</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dispose</span> <span class="p">=</span> <span class="n">dispose</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Interlocked</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="k">ref</span> <span class="n">_dispose</span><span class="p">,</span> <span class="k">null</span><span class="p">)?.</span><span class="nf">Invoke</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I <em>think</em> that’ll work. It takes into account some of the nuances of
<code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code>.</p>

<p>But no guarantees!</p>

<p>And I don’t like it.</p>

<h1 id="the-point">The point</h1>

<p>I think that <code class="language-plaintext highlighter-rouge">ReentrantAsyncLock</code> provides all the important aspects of an
asynchronous lock. It does sometimes require some careful thought when you use
it, but all of the rough spots that I know of can be addressed and aren’t
showstoppers.</p>

<p>Feel free to <a href="https://www.nuget.org/packages/ReentrantAsyncLock/">try it out</a>
and please
<a href="https://github.com/matthew-a-thomas/cs-reentrant-async-lock/issues/new">report any bugs you find</a>!</p>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Answering some questions about ReentrantAsyncLock]]></summary></entry><entry><title type="html">A More Ergonomic Async Lock (obsolete)</title><link href="/programming/2022/06/15/ergonomic-async-lock.html" rel="alternate" type="text/html" title="A More Ergonomic Async Lock (obsolete)" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>/programming/2022/06/15/ergonomic-async-lock</id><content type="html" xml:base="/programming/2022/06/15/ergonomic-async-lock.html"><![CDATA[<div class="alert alert-warning">

<h2 id="warning">Warning</h2>

<p>The code described in this post has some issues. For example, the
code below doesn’t correctly handle cancellation. See
<a href="/programming/2022/06/20/introducing-reentrantasynclock.html">the next post</a> for a
better implementation that is more thoroughly tested.</p>

</div>

<p>I previously <a href="/programming/2022/06/14/reentrant-async-lock.html">described</a> how to
make an async lock that supports all three of these at once:</p>

<ul>
  <li>Reentrance</li>
  <li>Asynchronicity</li>
  <li>Mutual exclusion</li>
</ul>

<p>Now I’m going to show how to make it more ergonomic. With
<a href="/programming/2022/06/14/reentrant-async-lock.html">the <code class="language-plaintext highlighter-rouge">WorkQueue</code> class from that post</a>
and with the <code class="language-plaintext highlighter-rouge">EnterAsync</code> extension method shown below you’ll be able to write
code like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="n">WorkQueue</span> <span class="n">_asyncLock</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
<span class="k">readonly</span> <span class="kt">object</span> <span class="n">_resource</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

<span class="k">async</span> <span class="n">Task</span> <span class="nf">DoItAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">_asyncLock</span><span class="p">.</span><span class="nf">EnterAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="nf">ExclusivelyUse</span><span class="p">(</span><span class="n">_resource</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-enterasync-extension-method">The <code class="language-plaintext highlighter-rouge">EnterAsync</code> extension method</h2>

<p>This extension method sets <code class="language-plaintext highlighter-rouge">SynchronizationContext.Current</code> to the given
<code class="language-plaintext highlighter-rouge">SynchronizationContext</code>, then asynchronously enters it. When the returned
<code class="language-plaintext highlighter-rouge">IAsyncDisposable</code> is disposed of then <code class="language-plaintext highlighter-rouge">SynchronizationContext.Current</code> will be
reset to whatever it was before.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Runtime.CompilerServices</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SynchronizationContextExtensions</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">?,</span> <span class="n">IAsyncDisposable</span><span class="p">&gt;</span> <span class="n">CastToAsyncDisposable</span> <span class="p">=</span> <span class="n">state</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">IAsyncDisposable</span><span class="p">)</span><span class="n">state</span><span class="p">!;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="n">Action</span> <span class="n">DoNothing</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{};</span>

    <span class="k">static</span> <span class="k">readonly</span> <span class="n">ConditionalWeakTable</span><span class="p">&lt;</span><span class="n">SynchronizationContext</span><span class="p">,</span> <span class="n">TaskFactory</span><span class="p">&gt;</span> <span class="n">SynchronizationContextToTaskFactoryMap</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IAsyncDisposable</span><span class="p">&gt;</span> <span class="nf">EnterAsync</span><span class="p">(</span>
        <span class="k">this</span> <span class="n">SynchronizationContext</span> <span class="n">context</span><span class="p">,</span>
        <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cancellationToken</span><span class="p">.</span><span class="n">IsCancellationRequested</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">FromCanceled</span><span class="p">&lt;</span><span class="n">IAsyncDisposable</span><span class="p">&gt;(</span><span class="n">cancellationToken</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">previousContext</span> <span class="p">=</span> <span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
        <span class="n">SynchronizationContext</span><span class="p">.</span><span class="nf">SetSynchronizationContext</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">contextFactory</span> <span class="p">=</span> <span class="nf">GetOrCreateTaskFactory</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">disposable</span> <span class="p">=</span> <span class="n">AsyncDisposable</span><span class="p">.</span><span class="nf">Create</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">==</span> <span class="n">context</span><span class="p">)</span>
                <span class="n">SynchronizationContext</span><span class="p">.</span><span class="nf">SetSynchronizationContext</span><span class="p">(</span><span class="n">previousContext</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="n">DoNothing</span><span class="p">,</span> <span class="n">CancellationToken</span><span class="p">.</span><span class="n">None</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ValueTask</span><span class="p">(</span><span class="n">task</span><span class="p">);</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="nf">EnterAsyncCore</span><span class="p">(</span><span class="n">contextFactory</span><span class="p">,</span> <span class="n">disposable</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="n">TaskFactory</span> <span class="nf">GetOrCreateTaskFactory</span><span class="p">(</span><span class="n">SynchronizationContext</span> <span class="n">context</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Assert</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">==</span> <span class="n">context</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">SynchronizationContextToTaskFactoryMap</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="k">out</span> <span class="kt">var</span> <span class="n">factory</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">factory</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">scheduler</span> <span class="p">=</span> <span class="n">TaskScheduler</span><span class="p">.</span><span class="nf">FromCurrentSynchronizationContext</span><span class="p">();</span>
        <span class="n">factory</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TaskFactory</span><span class="p">(</span><span class="n">scheduler</span><span class="p">);</span>
        <span class="n">SynchronizationContextToTaskFactoryMap</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">factory</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">factory</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IAsyncDisposable</span><span class="p">&gt;</span> <span class="nf">EnterAsyncCore</span><span class="p">(</span>
        <span class="n">TaskFactory</span> <span class="n">taskFactory</span><span class="p">,</span>
        <span class="n">IAsyncDisposable</span> <span class="n">disposable</span><span class="p">,</span>
        <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">taskFactory</span><span class="p">.</span><span class="nf">StartNew</span><span class="p">(</span><span class="n">CastToAsyncDisposable</span><span class="p">,</span> <span class="n">disposable</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">_</span> <span class="p">=</span> <span class="n">disposable</span><span class="p">.</span><span class="nf">DisposeAsync</span><span class="p">();</span>
            <span class="k">throw</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">AsyncDisposable</span> <span class="p">:</span> <span class="n">IAsyncDisposable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">AsyncDisposable</span> <span class="n">Empty</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>

    <span class="n">Func</span><span class="p">&lt;</span><span class="n">ValueTask</span><span class="p">&gt;?</span> <span class="n">_disposeAsync</span><span class="p">;</span>

    <span class="nf">AsyncDisposable</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">ValueTask</span><span class="p">&gt;?</span> <span class="n">disposeAsync</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_disposeAsync</span> <span class="p">=</span> <span class="n">disposeAsync</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">AsyncDisposable</span> <span class="nf">Create</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">ValueTask</span><span class="p">&gt;</span> <span class="n">disposeAsync</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span><span class="p">(</span><span class="n">disposeAsync</span><span class="p">);</span>

    <span class="k">public</span> <span class="n">ValueTask</span> <span class="nf">DisposeAsync</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Interlocked</span><span class="p">.</span><span class="nf">Exchange</span><span class="p">(</span><span class="k">ref</span> <span class="n">_disposeAsync</span><span class="p">,</span> <span class="k">null</span><span class="p">)?.</span><span class="nf">Invoke</span><span class="p">()</span> <span class="p">??</span> <span class="k">default</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="a-passing-test-case">A passing test case</h2>

<p>The following test passes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">EnterAsyncMethodShouldSwitchIntoAndOutOfGivenContext</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">SynchronizationContext</span><span class="p">.</span><span class="nf">SetSynchronizationContext</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// Necessary because xUnit's SynchronizationContexts like to waffle back and forth</span>
    <span class="kt">var</span> <span class="n">newContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SimpleWorkQueue</span><span class="p">();</span>
    <span class="k">await</span> <span class="k">using</span> <span class="p">(</span><span class="k">await</span> <span class="n">newContext</span><span class="p">.</span><span class="nf">EnterAsync</span><span class="p">(</span><span class="k">default</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">Assert</span><span class="p">.</span><span class="nf">Same</span><span class="p">(</span><span class="n">newContext</span><span class="p">,</span> <span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">Null</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">isActuallyOutOfTheContext</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="n">newContext</span><span class="p">.</span><span class="nf">Post</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">isActuallyOutOfTheContext</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">spinWait</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SpinWait</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(!</span><span class="n">isActuallyOutOfTheContext</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">spinWait</span><span class="p">.</span><span class="nf">SpinOnce</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><summary type="html"><![CDATA[Making the work queue look more like an async lock]]></summary></entry></feed>